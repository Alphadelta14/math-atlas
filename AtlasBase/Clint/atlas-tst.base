@ifdef ! incd
   @define incd @/home/rwhaley/Base/ATLAS@ 
@endifdef
@extract -b @(topd)/gen.inc what=crsetup
@ROUT ATL_f77posv ATL_f77gesv
@extract -b @(topd)/gen.inc what=cw @(cw07)
@ROUT ATL_f77posv
@define rt @posv@
@ROUT ATL_f77gesv
@define rt @gesv@
@ROUT ATL_f77gels
@extract -b @(topd)/gen.inc what=cw @(cw06)
@define rt @gels@
@ROUT ATL_f77posv ATL_f77gesv ATL_f77gels
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77.h"

#if defined(NoChange)
   #define F77@up@(rt) Mjoin(PRE,@(rt))
#elif defined (UpCase)
   #define F77@up@(rt) Mjoin(PREU,@up@(rt))
#elif defined (Add_) || defined(Add__)
   #define F77@up@(rt) Mjoin(PRE,@(rt)_)
#endif
#define f77@(rt) Mjoin(PATL,f77@(rt))

@ROUT ATL_f77posv
int f77posv(const enum ATLAS_UPLO UPLO, const int N, const int NRHS,
            TYPE *A, const int lda, TYPE *B, const int ldb)
@ROUT ATL_f77gesv
int f77gesv(const int N, const int NRHS, TYPE *A, const int lda, 
            int *ipiv, TYPE *B, const int ldb)
@ROUT ATL_f77gels
int f77gels(const enum ATLAS_TRANS TA, const int M, const int N, const int NRHS,
            TYPE *A, const int lda, TYPE *B, const int ldb)
@ROUT ATL_f77posv ATL_f77gesv ATL_f77gels
{
@ROUT ATL_f77posv ATL_f77gels
   #if defined(StringSunStyle)
      #if defined(ATL_FunkyInts)
         F77_INTEGER ONE=1;
      #else
         int ONE=1;
      #endif
   #elif defined(StringStructVal) || defined(StringStructPtr) || defined(StringCrayStyle)
@ROUT ATL_f77posv
      F77_CHAR fuplo;
@ROUT ATL_f77gels
      F77_CHAR ftrans;
@ROUT ATL_f77posv ATL_f77gels
   #endif
@ROUT ATL_f77posv ATL_f77gesv
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77N=N, F77lda=lda, F77ldb=ldb, F77NRHS=NRHS;
      F77_INTEGER info;
@ROUT ATL_f77gesv `      F77_INTEGER *F77ipiv;`
   #else
      int info; 
      #define F77N N
      #define F77NRHS NRHS
      #define F77lda lda
      #define F77ldb ldb
@ROUT ATL_f77gesv `      #define F77ipiv ipiv`
   #endif
@ROUT ATL_f77gesv
   int i;
@ROUT ATL_f77posv
   char cuplo;
@ROUT ATL_f77gels 
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77N=N, F77lda=lda, F77ldb=ldb, F77M=M, F77NRHS=NRHS;
      F77_INTEGER lwork, info;
   #else
      int info, lwork; 
      #define F77M M
      #define F77N N
      #define F77NRHS NRHS
      #define F77lda lda
      #define F77ldb ldb
   #endif
   char ctrans;
   TYPE *work, wrk[2];

   if (TA == AtlasNoTrans) ctrans = 'N';
   else if (TA == AtlasTrans) ctrans = 'T';
   else ctrans = 'C';
@ROUT ATL_f77posv
   cuplo = (UPLO == AtlasUpper) ? 'U' : 'L';
@ROUT ATL_f77gesv
   #ifdef ATL_FunkyInts
      F77ipiv = malloc(N*sizeof(F77_INTEGER));
      ATL_assert(F77ipiv);
   #endif
   F77@up@(rt)(&F77N, &F77NRHS, A, &F77lda, F77ipiv, B, &F77ldb, &info);
   #ifdef ATL_FunkyInts
      for (i=0; i < N; i++) ipiv[i] = F77ipiv[i] - 1;
      free(F77ipiv);
   #else
      for (i=0; i < N; i++) ipiv[i]--;
   #endif
@ROUT ATL_f77posv 
   #if defined(StringSunStyle)
      #define args &cuplo, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, &info, ONE
   #elif defined(StringCrayStyle)
      ftrans = ATL_C2F_TransChar(cuplo);
      #define args cuplo, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, &info
   #elif defined(StringStructVal)
      fuplo.len = 1;
      fuplo.cp = &cuplo;
      #define args fuplo, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, &info
   #elif defined(StringStructPtr)
      fuplo.len = 1;
      fuplo.cp = &cuplo;
      #define args &fuplo, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, &info
   #else
      #define args NULL
      fprintf(stderr, "\n\nF77/C interface not defined!!\n\n");
      exit(-1);
   #endif
   F77@up@(rt)(args);
@ROUT ATL_f77gesv ATL_f77posv
   return(info);
}
@ROUT ATL_f77gels
   #if defined(StringSunStyle)
      #define args &ctrans, &F77M, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, \
                   work, &lwork, &info, ONE
   #elif defined(StringCrayStyle)
      ftrans = ATL_C2F_TransChar(cuplo);
      #define args ftrans, &F77M, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, \
                   work, &lwork, &info
   #elif defined(StringStructVal)
      ftrans.len = 1;
      ftrans.cp = &ctrans;
      #define args ftrans, &F77M, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, \
                   work, &lwork, &info
   #elif defined(StringStructPtr)
      ftrans.len = 1;
      ftrans.cp = &ctrans;
      #define args &ftrans, &F77M, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, \
                   work, &lwork, &info
   #else
      #define args NULL
      fprintf(stderr, "\n\nF77/C interface not defined!!\n\n");
      exit(-1);
   #endif
/*
 * Query routine for optimal workspace, allocate it, and call routine with it
 */
   work = wrk;
   lwork = -1;
   F77@up@(rt)(args);
   lwork = wrk[0];
   work = malloc(ATL_MulBySize(lwork));
   ATL_assert(work);
   info = 0;
   F77@up@(rt)(args);
   free(work);
   return(info);
}
@ROUT ATL_f77posv00
   @define rt @posv@
@extract -b @(topd)/gen.inc what=cw @(cw06)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77.h"

#if defined(NoChange)
   #define F77@up@(rt) Mjoin(PRE,@(rt))
#elif defined (UpCase)
   #define F77@up@(rt) Mjoin(PREU,@up@(rt))
#elif defined (Add_) || defined(Add__)
   #define F77@up@(rt) Mjoin(PRE,@(rt)_)
#endif
#define f77@(rt) Mjoin(PATL,f77@(rt))

int f77posv(const enum ATLAS_UPLO Uplo, const int N, const int NRHS, 
            TYPE *A, const int lda, TYPE *B, const int ldb)
{
   #if defined(StringSunStyle)
      #if defined(ATL_FunkyInts)
         F77_INTEGER ONE=1;
      #else
         int ONE=1;
      #endif
   #elif defined(StringStructVal) || defined(StringStructPtr) || defined(StringCrayStyle)
      F77_CHAR fuplo;
   #endif
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77N=N, F77NRHS=NRHS, F77lda=lda, F77ldb=ldb;
      F77_INTEGER info;
   #else
      int info; 
      #define F77N N
      #define F77NRHS NRHS
      #define F77lda lda
      #define F77ldb ldb
   #endif
   char cuplo;

   if (Uplo == AtlasUpper) cuplo = 'U';
   else cuplo = 'L';
   #if defined(StringSunStyle)
      F77@up@(rt)(&cuplo, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, &info, ONE);
   #elif defined(StringCrayStyle)
      fuplo = ATL_C2F_TransChar(cuplo);
      F77@up@(rt)(fuplo, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, &info);
   #elif defined(StringStructVal)
      fuplo.len = 1;
      fuplo.cp = &cuplo;
      F77@up@(rt)(fuplo, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, &info);
   #elif defined(StringStructPtr)
      fuplo.len = 1;
      fuplo.cp = &cuplo;
      F77@up@(rt)(&fuplo, &F77N, &F77NRHS, A, &F77lda, B, &F77ldb, &info);
   #else
      fprintf(stderr, "\n\nF77/C interface not defined!!\n\n");
      exit(-1);
   #endif
   return(info);
}
@ROUT ATL_f77potrf
   @define rt @potrf@
@ROUT ATL_f77lauum
   @define rt @lauum@
@ROUT ATL_f77potrf ATL_f77lauum
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77.h"

#if defined(NoChange)
   #define F77@up@(rt) Mjoin(PRE,@(rt))
#elif defined (UpCase)
   #define F77@up@(rt) Mjoin(PREU,@up@(rt))
#elif defined (Add_) || defined(Add__)
   #define F77@up@(rt) Mjoin(PRE,@(rt)_)
#endif
#define f77@(rt) Mjoin(PATL,f77@(rt))

int f77@(rt)(const enum ATLAS_UPLO Uplo, const int N, TYPE *A, const int lda)
{
   #if defined(StringSunStyle)
      #if defined(ATL_FunkyInts)
         F77_INTEGER ONE=1;
      #else
         int ONE=1;
      #endif
   #elif defined(StringStructVal) || defined(StringStructPtr) || defined(StringCrayStyle)
      F77_CHAR fuplo;
   #endif
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77N=N, F77lda=lda;
      F77_INTEGER info;
   #else
      int info; 
      #define F77N N
      #define F77lda lda
   #endif
   char cuplo;

   if (Uplo == AtlasUpper) cuplo = 'U';
   else cuplo = 'L';
   #if defined(StringSunStyle)
      F77@up@(rt)(&cuplo, &F77N, A, &F77lda, &info, ONE);
   #elif defined(StringCrayStyle)
      fuplo = ATL_C2F_TransChar(cuplo);
      F77@up@(rt)(fuplo, &F77N, A, &F77lda, &info);
   #elif defined(StringStructVal)
      fuplo.len = 1;
      fuplo.cp = &cuplo;
      F77@up@(rt)(fuplo, &F77N, A, &F77lda, &info);
   #elif defined(StringStructPtr)
      fuplo.len = 1;
      fuplo.cp = &cuplo;
      F77@up@(rt)(&fuplo, &F77N, A, &F77lda, &info);
   #else
      fprintf(stderr, "\n\nF77/C interface not defined!!\n\n");
      exit(-1);
   #endif
   return(info);
}
@ROUT ATL_f77gelqf
@define rt @gelqf@
@ROUT ATL_f77geqrf
@define rt @geqrf@
@ROUT ATL_f77gerqf
@define rt @gerqf@
@ROUT ATL_f77geqlf
@define rt @geqlf@
@ROUT ATL_f77geqrf ATL_f77gelqf ATL_f77geqlf ATL_f77gerqf
@extract -b @(topd)/gen.inc what=cw @(cw08)
@ROUT ATL_f77getri
@extract -b @(topd)/gen.inc what=cw @(cw08)
@define rt @getri@
@extract -b @(topd)/gen.inc what=cw @(cw01)
@ROUT ATL_f77getrf
@extract -b @(topd)/gen.inc what=cw @(cw99)
@define rt @getrf@
@ROUT ATL_f77getrf ATL_f77getri ATL_f77getrf @\
      ATL_f77gelqf ATL_f77geqrf ATL_f77geqlf ATL_f77gerqf

#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77.h"

#if defined(NoChange)
   #define F77@up@(rt) Mjoin(PRE,@(rt))
#elif defined (UpCase)
   #define F77@up@(rt) Mjoin(PREU,@up@(rt))
#elif defined (Add_) || defined(Add__)
   #define F77@up@(rt) Mjoin(PRE,@(rt)_)
#endif
#define f77@(rt) Mjoin(PATL,f77@(rt))

@ROUT ATL_f77getri
int f77getri(const enum ATLAS_ORDER Order, const int N, TYPE *A, const int lda,
             int *ipiv, TYPE *work, int *lwork)
@ROUT ATL_f77gelqf ATL_f77geqrf ATL_f77geqlf ATL_f77gerqf
int f77@(rt)(const enum ATLAS_ORDER Order, const int M, const int N,
             TYPE *A, const int lda, TYPE *tau, TYPE *work, int lwork)
@ROUT ATL_f77getrf
int f77getrf(const enum ATLAS_ORDER Order, const int M, const int N,
             TYPE *A, const int lda, int *ipiv)
@ROUT ATL_f77getrf ATL_f77getri @\
      ATL_f77gelqf ATL_f77geqrf ATL_f77geqlf ATL_f77gerqf
{
@ROUT ATL_f77getrf ATL_f77getri `   int i;`
@ROUT ATL_f77gelqf ATL_f77geqrf ATL_f77geqlf ATL_f77gerqf
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77M=M, F77N=N, F77lda=lda, F77lwork=lwork, F77info;
@ROUT ATL_f77getri
   const int MN=N;
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77N=N, F77lda=lda, F77lwork=(*lwork);
      F77_INTEGER info, *F77ipiv;
@ROUT ATL_f77getrf
   const int MN=Mmin(M,N);
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77M=M, F77N=N, F77lda=lda;
      F77_INTEGER info, *F77ipiv;
@ROUT ATL_f77getrf ATL_f77getri @\
      ATL_f77gelqf ATL_f77geqrf ATL_f77geqlf ATL_f77gerqf
   #else
@ROUT  ATL_f77gelqf ATL_f77geqrf ATL_f77geqlf ATL_f77gerqf `      int F77info;`
@ROUT ATL_f77getrf ATL_f77getri `      int info;`
      #define F77M M
      #define F77N N
      #define F77lda lda
@ROUT ATL_f77getrf ATL_f77getri `      #define F77ipiv ipiv`
@ROUT ATL_f77geqrf ATL_f77getri ATL_f77gelqf ATL_f77geqlf ATL_f77gerqf `      #define F77lwork lwork`
@ROUT ATL_f77getri  `      #define F77lwork (*lwork)`
   #endif
   ATL_assert(Order == AtlasColMajor);
@ROUT ATL_f77getrf ATL_f77getri 
      #define F77ipiv ipiv
   #ifdef ATL_FunkyInts
      F77ipiv = malloc(MN * sizeof(F77_INTEGER));
      ATL_assert(F77ipiv);
   #endif
@ROUT ATL_f77getri

   #ifdef ATL_FunkyInts
      *lwork = F77lwork;
      for (i=0; i < MN; i++) ipiv[i] = F77ipiv[i] + 1;
      free(F77ipiv);
   #else
      for (i=0; i < MN; i++) ipiv[i]++;
   #endif
   F77GETRI(&F77N, A, &F77lda, F77ipiv, work, &F77lwork, &info);
@ROUT ATL_f77gelqf ATL_f77geqrf ATL_f77geqlf ATL_f77gerqf

   F77@up@(rt)(&F77M, &F77N, A, &F77lda, tau, work, &F77lwork, &F77info);

   return(F77info);
}
@ROUT ATL_f77getrf

   F77GETRF(&F77M, &F77N, A, &F77lda, F77ipiv, &info);

@ROUT ATL_f77getrf ATL_f77getri
   #ifdef ATL_FunkyInts
      for (i=0; i < MN; i++) ipiv[i] = F77ipiv[i] - 1;
      free(F77ipiv);
   #else
      for (i=0; i < MN; i++) ipiv[i]--;
   #endif
   return(info);
}
@ROUT ATL_f77trtri
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77.h"

#if defined(NoChange)
   #define F77TRTRI Mjoin(PRE,trtri)
#elif defined (UpCase)
   #define F77TRTRI Mjoin(PREU,TRTRI)
#elif defined (Add_) || defined(Add__)
   #define F77TRTRI Mjoin(PRE,trtri_)
#endif
#define f77trtri Mjoin(PATL,f77trtri)

int f77trtri(const enum ATLAS_UPLO Uplo, const enum ATLAS_DIAG Diag,
	     const int N, TYPE *A, const int lda)
{
   #if defined(StringSunStyle)
      #if defined(ATL_FunkyInts)
         F77_INTEGER ONE=1;
      #else
         int ONE=1;
      #endif
   #elif defined(StringStructVal) || defined(StringStructPtr) || defined(StringCrayStyle)
      F77_CHAR fuplo;
      F77_CHAR fdiag;
   #endif
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77N=N, F77lda=lda;
      F77_INTEGER info;
   #else
      int info;
      #define F77N N
      #define F77lda lda
   #endif
   char cuplo;
   char cdiag;

   if (Uplo == AtlasUpper) cuplo = 'U';
   else cuplo = 'L';
   if (Diag == AtlasUnit) cdiag = 'U';
   else cdiag = 'N';
   #if defined(StringSunStyle)
      F77TRTRI(&cuplo, &cdiag, &F77N, A, &F77lda, &info, ONE);
   #elif defined(StringCrayStyle)
      fuplo = ATL_C2F_TransChar(cuplo);
      fdiag = ATL_C2F_TransChar(cdiag);
      F77TRTRI(fuplo, fdiag, &F77N, A, &F77lda, &info);
   #elif defined(StringStructVal)
      fuplo.len = 1;
      fdiag.len = 1;
      fuplo.cp = &cuplo;
      fdiag.cp = &cdiag;
      F77TRTRI(fuplo, fdiag, &F77N, A, &F77lda, &info);
   #elif defined(StringStructPtr)
      fuplo.len = 1;
      fdiag.len = 1;
      fuplo.cp = &cuplo;
      fdiag.cp = &cdiag;
      F77TRTRI(&fuplo, &fdiag, &F77N, A, &F77lda, &info);
   #else
      fprintf(stderr, "\n\nF77/C interface not defined!!\n\n");
      exit(-1);
   #endif
   return(info);
}
@ROUT ATL_f77rotg
@define rt @rotg@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   TYPE                      * A,
#ifdef TREAL
   TYPE                      * B,
#else
   const SCALAR              B,
#endif
   TYPE                      * C,
   TYPE                      * S
)
{
#ifdef TREAL
   TYPE                      * b = B;
#else
   TYPE                      b[2];

   *b = *B; b[1] = B[1];
#endif

   F77@(rt)( A, b, C, S );
}
@ROUT ATL_f77rotmg
@define rt @rotmg@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   TYPE                      * D1,
   TYPE                      * D2,
   TYPE                      * X1,
   const SCALAR              Y1,
   TYPE                      * PARAM
)
{
   TYPE                      Y10 = Y1;

   F77@(rt)( D1, D2, X1, &Y10, PARAM );
}
@ROUT ATL_f77nrm2
@define rt @nrm2@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

#ifdef TREAL
TYPE Mjoin( PATL, f77@(rt) )
#else
TYPE Mjoin( PATLU, Mjoin( PRE, f77@(rt) ) )
#endif
(
   const int                 N,
   const TYPE                * X,
   const int                 INCX
)
{
   TYPE                      nrm2;
   const F77_INTEGER         F77N=N, F77incx = Mabs(INCX);
   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;

   F77@(rt)( &F77N, X, &F77incx, &nrm2 );

   return( nrm2 );
}
@ROUT ATL_f77asum
@define rt @asum@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

#ifdef TREAL
TYPE Mjoin( PATL, f77@(rt) )
#else
TYPE Mjoin( PATLU, Mjoin( PRE, f77@(rt) ) )
#endif
(
   const int                 N,
   const TYPE                * X,
   const int                 INCX
)
{
   TYPE                      asum;
   const F77_INTEGER         F77N = N, F77incx = Mabs(INCX);
   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;

   F77@(rt)( &F77N, X, &F77incx, &asum );

   return( asum );
}
@ROUT ATL_f77amax
@define rt @amax@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

int Mjoin( PATL, f77@(rt) )
(
   const int                 N,
   const TYPE                * X,
   const int                 INCX
)
{
   const F77_INTEGER         F77N = N, F77incx = Mabs(INCX);
   int                       imax = 0;

   if( N > 0 )
   {   
      if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
      imax = F77@(rt)( &F77N, X, &F77incx ) - 1;
   }
   return( imax );
}
@ROUT ATL_f77scal
@define rt @scal@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const int                 N,
   const SCALAR              ALPHA,
   TYPE                      * X,
   const int                 INCX
)
{
   const F77_INTEGER         F77N = N, F77incx = Mabs(INCX);
#ifdef TCPLX
   TYPE                      alpha[2];

   *alpha   = *ALPHA;
   alpha[1] = ALPHA[1];
#else
   TYPE                      alpha = ALPHA;
#endif

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;

   F77@(rt)( &F77N, SADD alpha, X, &F77incx );
}
@ROUT ATL_f77rscal
@define rt @scal@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, Mjoin( UPR, f77@(rt) ) )
(
   const int                 N,
   const TYPE                ALPHA,
   TYPE                      * X,
   const int                 INCX
)
{
   const F77_INTEGER         F77N = N, F77incx = Mabs(INCX);
   TYPE                      alpha = ALPHA;

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;

   F77r@(rt)( &F77N, &alpha, X, &F77incx );
}
@ROUT ATL_f77axpby
@define rt @axpby@
@extract -b @(topd)/gen.inc what=cw @(cw01)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin(PATL,f77@(rt))
   (const int N, const SCALAR alpha0, const TYPE *X, const int incX, 
    const SCALAR beta0, TYPE *Y, const int incY)
{
#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N = N, F77incX = incX, F77incY = incY;
#else
   #define F77N              N
   #define F77incX           incX
   #define F77incY           incY
#endif
#ifdef TCPLX
   TYPE alpha[2], beta[2];
   *alpha = *alpha0; alpha[1] = alpha0[1];
   *beta = *beta0;   beta[1] = beta0[1];
#else
   TYPE alpha=alpha0, beta=beta0;
#endif

   if( incX < 0 ) X -= ((1-N)*incX)SHIFT;
   if( incY < 0 ) Y -= ((1-N)*incY)SHIFT;

   F77@(rt)(&F77N, SADD alpha, X, &F77incX, SADD beta, Y, &F77incY);
}
@ROUT ATL_f77axpy
@define rt @axpy@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const int                 N,
   const SCALAR              ALPHA,
   const TYPE                * X,
   const int                 INCX,
   TYPE                      * Y,
   const int                 INCY
)
{
#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N = N, F77incx = INCX, F77incy = INCY;
#else
   #define F77N              N
   #define F77incx           INCX
   #define F77incy           INCY
#endif

#ifdef TCPLX
   TYPE                      alpha[2];

   *alpha   = *ALPHA;
   alpha[1] = ALPHA[1];
#else
   TYPE                      alpha = ALPHA;
#endif

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - N ) * INCY ) SHIFT;

   F77@(rt)( &F77N, SADD alpha, X, &F77incx, Y, &F77incy );
}
@ROUT ATL_f77copy
@define rt @copy@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const int                 N,
   const TYPE                * X,
   const int                 INCX,
   TYPE                      * Y,
   const int                 INCY
)
{
#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N = N, F77incx = INCX, F77incy = INCY;
#else
   #define F77N              N
   #define F77incx           INCX
   #define F77incy           INCY
#endif

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - N ) * INCY ) SHIFT;

   F77@(rt)( &F77N, X, &F77incx, Y, &F77incy );
}
@ROUT ATL_f77swap
@define rt @swap@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const int                 N,
   TYPE                      * X,
   const int                 INCX,
   TYPE                      * Y,
   const int                 INCY
)  
{
#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N = N, F77incx = INCX, F77incy = INCY;
#else
   #define F77N              N
   #define F77incx           INCX
   #define F77incy           INCY
#endif

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - N ) * INCY ) SHIFT;

   F77@(rt)( &F77N, X, &F77incx, Y, &F77incy );
}
@ROUT ATL_f77rot
@define rt @rot@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

#ifdef TREAL
void Mjoin( PATL, f77@(rt) )
#else
void Mjoin( PATL, Mjoin( UPR, f77@(rt) ) )
#endif
(
   const int                 N,
   TYPE                      * X,
   const int                 INCX,
   TYPE                      * Y,
   const int                 INCY,
#ifdef TREAL
   const SCALAR              C,
   const SCALAR              S
#else
   const TYPE                C,
   const TYPE                S
#endif
)
{
#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N = N, F77incx = INCX, F77incy = INCY;
#else
   #define F77N              N
   #define F77incx           INCX
   #define F77incy           INCY
#endif
   TYPE                      c = C, s = S;

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - N ) * INCY ) SHIFT;

#ifdef TREAL
   F77@(rt)( &F77N, X, &F77incx, Y, &F77incy, SADD c, SADD s );
#else
   F77@(rt)( &F77N, X, &F77incx, Y, &F77incy, &c,     &s     );
#endif
}
@ROUT ATL_f77rotm
@define rt @rotm@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const int                 N,
   TYPE                      * X,
   const int                 INCX,
   TYPE                      * Y,
   const int                 INCY,
   const TYPE                * PARAM
)
{
#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N = N, F77incx = INCX, F77incy = INCY;
#else
   #define F77N              N
   #define F77incx           INCX
   #define F77incy           INCY
#endif

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - N ) * INCY ) SHIFT;

   F77@(rt)( &F77N, X, &F77incx, Y, &F77incy, PARAM );
}
@ROUT ATL_f77dot
@define rt @dot@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

TYPE Mjoin( PATL, f77@(rt) )
(
   const int                 N,
   const TYPE                * X,
   const int                 INCX,
   const TYPE                * Y,
   const int                 INCY
)
{
   TYPE                      dot;
#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N = N, F77incx = INCX, F77incy = INCY;
#else
   #define F77N              N
   #define F77incx           INCX
   #define F77incy           INCY
#endif

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - N ) * INCY ) SHIFT;

   F77@(rt)( &F77N, X, &F77incx, Y, &F77incy, &dot );

   return( dot );
}
@ROUT ATL_f77dotu_sub
@define rt @dotu@
@ROUT ATL_f77dotc_sub
@define rt @dotc@
@ROUT ATL_f77dotu_sub ATL_f77dotc_sub
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt)_sub )
(
   const int                 N,
   const TYPE                * X,
   const int                 INCX,
   const TYPE                * Y,
   const int                 INCY,
   TYPE                      * DOT
)
{
#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N = N, F77incx = INCX, F77incy = INCY;
#else
   #define F77N              N
   #define F77incx           INCX
   #define F77incy           INCY
#endif

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - N ) * INCY ) SHIFT;

   F77@(rt)( &F77N, X, &F77incx, Y, &F77incy, DOT );
}
@ROUT ATL_sf77wrap
      SUBROUTINE SWRAPNRM2( N, X, INCX, NRM2 )
      INTEGER            N, INCX
      REAL               NRM2
      REAL               X( * )
      EXTERNAL           SNRM2
      REAL               SNRM2
      NRM2 = SNRM2( N, X, INCX )
      RETURN
      END

      SUBROUTINE SWRAPASUM( N, X, INCX, ASUM )
      INTEGER            N, INCX
      REAL               ASUM
      REAL               X( * )
      EXTERNAL           SASUM
      REAL               SASUM
      ASUM = SASUM( N, X, INCX )
      RETURN
      END

      SUBROUTINE SWRAPDOT( N, X, INCX, Y, INCY, DOT )
      INTEGER            N, INCX, INCY
      REAL               DOT
      REAL               X( * ), Y( * )
      EXTERNAL           SDOT
      REAL               SDOT
      DOT = SDOT( N, X, INCX, Y, INCY )
      RETURN
      END

      SUBROUTINE DSWRAPDOT( N, X, INCX, Y, INCY, DOT )
      INTEGER            N, INCX, INCY
      DOUBLE PRECISION   DOT
      REAL               X( * ), Y( * )
      EXTERNAL           DSDOT
      DOUBLE PRECISION   DSDOT
      DOT = DSDOT( N, X, INCX, Y, INCY )
      RETURN
      END

      SUBROUTINE SDSWRAPDOT( N, B, X, INCX, Y, INCY, DOT )
      INTEGER            N, INCX, INCY
      REAL               B, DOT
      REAL               X( * ), Y( * )
      EXTERNAL           SDSDOT
      REAL               SDSDOT
      DOT = SDSDOT( N, B, X, INCX, Y, INCY )
      RETURN
      END
@ROUT ATL_df77wrap
      SUBROUTINE DWRAPNRM2( N, X, INCX, NRM2 )
      INTEGER            N, INCX
      DOUBLE PRECISION   NRM2
      DOUBLE PRECISION   X( * )
      EXTERNAL           DNRM2
      DOUBLE PRECISION   DNRM2
      NRM2 = DNRM2( N, X, INCX )
      RETURN
      END

      SUBROUTINE DWRAPASUM( N, X, INCX, ASUM )
      INTEGER            N, INCX
      DOUBLE PRECISION   ASUM
      DOUBLE PRECISION   X( * )
      EXTERNAL           DASUM
      DOUBLE PRECISION   DASUM
      ASUM = DASUM( N, X, INCX )
      RETURN
      END

      SUBROUTINE DWRAPDOT( N, X, INCX, Y, INCY, DOT )
      INTEGER            N, INCX, INCY
      DOUBLE PRECISION   DOT
      DOUBLE PRECISION   X( * ), Y( * )
      EXTERNAL           DDOT
      DOUBLE PRECISION   DDOT
      DOT = DDOT( N, X, INCX, Y, INCY )
      RETURN
      END
@ROUT ATL_cf77wrap
      SUBROUTINE SCWRAPNRM2( N, X, INCX, NRM2 )
      INTEGER        N, INCX
      REAL           NRM2
      COMPLEX        X( * ) 
      EXTERNAL       SCNRM2
      REAL           SCNRM2
      NRM2 = SCNRM2( N, X, INCX )
      RETURN
      END

      SUBROUTINE SCWRAPASUM( N, X, INCX, ASUM )
      INTEGER        N, INCX
      REAL           ASUM
      COMPLEX        X( * ) 
      EXTERNAL       SCASUM
      REAL           SCASUM
      ASUM = SCASUM( N, X, INCX )
      RETURN
      END

      SUBROUTINE CWRAPDOTU( N, X, INCX, Y, INCY, DOT )
      INTEGER        N, INCX, INCY
      COMPLEX        DOT 
      COMPLEX        X( * ), Y( * ) 
      COMPLEX        CDOTU
      EXTERNAL       CDOTU
      DOT = CDOTU( N, X, INCX, Y, INCY )
      RETURN
      END

      SUBROUTINE CWRAPDOTC( N, X, INCX, Y, INCY, DOT )
      INTEGER        N, INCX, INCY
      COMPLEX        DOT
      COMPLEX        X( * ), Y( * )
      COMPLEX        CDOTC
      EXTERNAL       CDOTC
      DOT = CDOTC( N, X, INCX, Y, INCY )
      RETURN
      END
@ROUT ATL_zf77wrap
      SUBROUTINE DZWRAPNRM2( N, X, INCX, NRM2 )
      INTEGER            N, INCX
      DOUBLE PRECISION   NRM2
      COMPLEX*16         X( * )
      EXTERNAL           DZNRM2
      DOUBLE PRECISION   DZNRM2
      NRM2 = DZNRM2( N, X, INCX )
      RETURN
      END

      SUBROUTINE DZWRAPASUM( N, X, INCX, ASUM )
      INTEGER            N, INCX
      DOUBLE PRECISION   ASUM
      COMPLEX*16         X( * )
      EXTERNAL           DZASUM
      DOUBLE PRECISION   DZASUM
      ASUM = DZASUM( N, X, INCX )
      RETURN
      END

      SUBROUTINE ZWRAPDOTU( N, X, INCX, Y, INCY, DOT )
      INTEGER            N, INCX, INCY
      COMPLEX*16         DOT
      COMPLEX*16         X( * ), Y( * )
      COMPLEX*16         ZDOTU
      EXTERNAL           ZDOTU
      DOT = ZDOTU( N, X, INCX, Y, INCY )
      RETURN
      END

      SUBROUTINE ZWRAPDOTC( N, X, INCX, Y, INCY, DOT )
      INTEGER            N, INCX, INCY
      COMPLEX*16         DOT
      COMPLEX*16         X( * ), Y( * )
      COMPLEX*16         ZDOTC
      EXTERNAL           ZDOTC
      DOT = ZDOTC( N, X, INCX, Y, INCY )
      RETURN
      END
@ROUT ATL_dsf77dot
@define rt @dsdot@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

double ATL_dsf77dot
(
   const int                  N,
   const float                * X,
   const int                  INCX,
   const float                * Y,
   const int                  INCY
)
{
   double                     dot;
#ifdef ATL_FunkyInts
   const F77_INTEGER          F77N = N, F77incx = INCX, F77incy = INCY;
#else
   #define F77N               N
   #define F77incx            INCX
   #define F77incy            INCY
#endif

   if( INCX < 0 ) X -= ( 1 - N ) * INCX;
   if( INCY < 0 ) Y -= ( 1 - N ) * INCY;

   F77@(rt)( &F77N, X, &F77incx, Y, &F77incy, &dot );

   return( dot );
}
@ROUT ATL_sdsf77dot
@define rt @sdsdot@
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

float ATL_sdsf77dot
(
   const int                  N,
   const float                B,
   const float                * X,
   const int                  INCX,
   const float                * Y,
   const int                  INCY
)
{
   float                      b = B, dot;
#ifdef ATL_FunkyInts
   const F77_INTEGER          F77N = N, F77incx = INCX, F77incy = INCY;
#else
   #define F77N               N
   #define F77incx            INCX
   #define F77incy            INCY
#endif

   if( INCX < 0 ) X -= ( 1 - N ) * INCX;
   if( INCY < 0 ) Y -= ( 1 - N ) * INCY;

   F77@(rt)( &F77N, &b, X, &F77incx, Y, &F77incy, &dot );

   return( dot );
}
@ROUT ATL_f77gemv
@define rt @gemv@
@ROUT ATL_f77gbmv
@define rt @gbmv@
@ROUT ATL_f77gemv ATL_f77gbmv
@extract -b @(topd)/gen.inc what=cw @(aw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const enum ATLAS_TRANS    Trans,
   const int                 M,
   const int                 N,
@ROUT ATL_f77gbmv
   const int                 KL,
   const int                 KU,
@ROUT ATL_f77gemv ATL_f77gbmv
   const SCALAR              ALPHA,
   const TYPE                * A,
   const int                 LDA,
   const TYPE                * X,
   const int                 INCX, 
   const SCALAR              BETA,
   TYPE                      * Y,
   const int                 INCY
)
{
#if defined( StringSunStyle )
   #if defined( ATL_FunkyInts )
   F77_INTEGER               ONE = 1;
   #else
   int                       ONE = 1;
   #endif
#elif defined( StringStructVal ) || defined( StringStructPtr )
   F77_CHAR                  ftran;
#elif defined( StringCrayStyle )
   F77_CHAR                  ftran;
#endif

   char                      ctran;

#ifdef ATL_FunkyInts
   const F77_INTEGER         F77M    = M,   F77N    = N,
@ROUT ATL_f77gbmv
                             F77KL   = KL,  F77KU   = KU,
@ROUT ATL_f77gemv ATL_f77gbmv
                             F77lda  = LDA, F77incx = INCX, F77incy = INCY;
#else
@ROUT ATL_f77gbmv
   #define F77KL             KL
   #define F77KU             KU
@ROUT ATL_f77gemv ATL_f77gbmv
   #define F77lda            LDA
   #define F77incx           INCX
   #define F77incy           INCY
#endif
   int                       nX, nY;

#ifdef TCPLX
   TYPE                      alpha[2], beta[2];

   *alpha = *ALPHA; alpha[1] = ALPHA[1];
   *beta  = *BETA;  beta [1] = BETA [1];
#else
   TYPE                      alpha = ALPHA, beta = BETA;
#endif

   if( Trans == AtlasNoTrans ) 
   { 
      nX = N; 
      nY = M; 
      ctran = 'N'; 
   }
   else
   {
      nX = M;
      nY = N;
      if( Trans == AtlasTrans ) ctran = 'T';
      else                      ctran = 'C';
   }

   if( INCX < 0 ) X -= ( ( 1 - nX ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - nY ) * INCY ) SHIFT;

#if   defined( StringSunStyle  )
@ROUT ATL_f77gemv
   F77@(rt)( &ctran, &F77M, &F77N,                 SADD alpha, A, &F77lda,
            X, &F77incx, SADD beta, Y, &F77incy, ONE );
@ROUT ATL_f77gbmv
   F77@(rt)( &ctran, &F77M, &F77N, &F77KL, &F77KU, SADD alpha, A, &F77lda,
            X, &F77incx, SADD beta, Y, &F77incy, ONE );
@ROUT ATL_f77gemv ATL_f77gbmv
#elif defined( StringCrayStyle )
   ftran = ATL_C2F_TransChar( ctran );
@ROUT ATL_f77gemv
   F77@(rt)( ftran,  &F77M, &F77N,                 SADD alpha, A, &F77lda,
            X, &F77incx, SADD beta, Y, &F77incy );
@ROUT ATL_f77gbmv
   F77@(rt)( ftran,  &F77M, &F77N, &F77KL, &F77KU, SADD alpha, A, &F77lda,
            X, &F77incx, SADD beta, Y, &F77incy );
@ROUT ATL_f77gemv ATL_f77gbmv
#elif defined( StringStructVal )
   ftran.len = 1; ftran.cp = &ctran;
@ROUT ATL_f77gemv
   F77@(rt)( ftran,  &F77M, &F77N,                 SADD alpha, A, &F77lda,
            X, &F77incx, SADD beta, Y, &F77incy );
@ROUT ATL_f77gbmv
   F77@(rt)( ftran,  &F77M, &F77N, &F77KL, &F77KU, SADD alpha, A, &F77lda,
            X, &F77incx, SADD beta, Y, &F77incy );
@ROUT ATL_f77gemv ATL_f77gbmv
#elif defined( StringStructPtr )
   ftran.len = 1; ftran.cp = &ctran;
@ROUT ATL_f77gemv
   F77@(rt)( &ftran, &F77M, &F77N,                 SADD alpha, A, &F77lda,
            X, &F77incx, SADD beta, Y, &F77incy );
@ROUT ATL_f77gbmv
   F77@(rt)( &ftran, &F77M, &F77N, &F77KL, &F77KU, SADD alpha, A, &F77lda,
            X, &F77incx, SADD beta, Y, &F77incy );
@ROUT ATL_f77gemv ATL_f77gbmv
#else
   (void) fprintf( stderr, "\n\nF77/C interface not defined!!\n\n" );
   exit( -1 );
#endif
}
@ROUT ATL_f77symv
@define rt @symv@
@ROUT ATL_f77hemv
@define rt @hemv@
@ROUT ATL_f77sbmv
@define rt @sbmv@
@ROUT ATL_f77hbmv
@define rt @hbmv@
@ROUT ATL_f77spmv
@define rt @spmv@
@ROUT ATL_f77hpmv
@define rt @hpmv@
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv ATL_f77spmv ATL_f77hpmv
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const enum ATLAS_UPLO     UPLO,
   const int                 N,
@ROUT ATL_f77sbmv ATL_f77hbmv
   const int                 K,
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv ATL_f77spmv ATL_f77hpmv
   const SCALAR              ALPHA,
   const TYPE                * A,
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv
   const int                 LDA,
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv ATL_f77spmv ATL_f77hpmv
   const TYPE                * X,
   const int                 INCX,
   const SCALAR              BETA,
   TYPE                      * Y,
   const int                 INCY
)
{
#if defined( StringSunStyle )
   #if defined( ATL_FunkyInts )
   F77_INTEGER               ONE = 1;
   #else
   int                       ONE = 1;
   #endif
#elif defined( StringStructVal ) || defined( StringStructPtr )
   F77_CHAR                  fuplo;
#elif defined( StringCrayStyle )
   F77_CHAR                  fuplo;
#endif

   char                      cuplo;

#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N    = N,
@ROUT ATL_f77sbmv ATL_f77hbmv
                             F77K    = K,
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv
                             F77lda  = LDA,
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv ATL_f77spmv ATL_f77hpmv
                             F77incx = INCX, F77incy = INCY;
#else
   #define F77N              N
@ROUT ATL_f77sbmv ATL_f77hbmv
   #define F77K              K
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv
   #define F77lda            LDA
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv ATL_f77spmv ATL_f77hpmv
   #define F77incx           INCX
   #define F77incy           INCY
#endif

#ifdef TCPLX
   TYPE                      alpha[2], beta[2];

   *alpha = *ALPHA; alpha[1] = ALPHA[1];
   *beta  = *BETA;  beta [1] = BETA [1];
#else
   TYPE                      alpha = ALPHA, beta = BETA;
#endif

   if( UPLO == AtlasUpper ) cuplo = 'U';
   else                     cuplo = 'L';

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - N ) * INCY ) SHIFT;

#if   defined( StringSunStyle  )
@ROUT ATL_f77sbmv ATL_f77hbmv
   F77@(rt)( &cuplo, &F77N, &F77K, SADD alpha, A, &F77lda, X, &F77incx,
@ROUT ATL_f77symv ATL_f77hemv
   F77@(rt)( &cuplo, &F77N,        SADD alpha, A, &F77lda, X, &F77incx,
@ROUT ATL_f77spmv ATL_f77hpmv
   F77@(rt)( &cuplo, &F77N,        SADD alpha, A,          X, &F77incx,
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv ATL_f77spmv ATL_f77hpmv
            SADD beta, Y, &F77incy, ONE );
#elif defined( StringCrayStyle )
   fuplo = ATL_C2F_TransChar( cuplo );
@ROUT ATL_f77sbmv ATL_f77hbmv
   F77@(rt)( fuplo,  &F77N, &F77K, SADD alpha, A, &F77lda, X, &F77incx,
@ROUT ATL_f77symv ATL_f77hemv
   F77@(rt)( fuplo,  &F77N,        SADD alpha, A, &F77lda, X, &F77incx,
@ROUT ATL_f77spmv ATL_f77hpmv
   F77@(rt)( fuplo,  &F77N,        SADD alpha, A,          X, &F77incx,
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv ATL_f77spmv ATL_f77hpmv
            SADD beta, Y, &F77incy );
#elif defined( StringStructVal )
   fuplo.len = 1; fuplo.cp = &cuplo;
@ROUT ATL_f77sbmv ATL_f77hbmv
   F77@(rt)( fuplo,  &F77N, &F77K, SADD alpha, A, &F77lda, X, &F77incx,
@ROUT ATL_f77symv ATL_f77hemv
   F77@(rt)( fuplo,  &F77N,        SADD alpha, A, &F77lda, X, &F77incx,
@ROUT ATL_f77spmv ATL_f77hpmv
   F77@(rt)( fuplo,  &F77N,        SADD alpha, A,          X, &F77incx,
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv ATL_f77spmv ATL_f77hpmv
            SADD beta, Y, &F77incy );
#elif defined( StringStructPtr )
   fuplo.len = 1; fuplo.cp = &cuplo;
@ROUT ATL_f77sbmv ATL_f77hbmv
   F77@(rt)( &fuplo, &F77N, &F77K, SADD alpha, A, &F77lda, X, &F77incx,
@ROUT ATL_f77symv ATL_f77hemv
   F77@(rt)( &fuplo, &F77N,        SADD alpha, A, &F77lda, X, &F77incx,
@ROUT ATL_f77spmv ATL_f77hpmv
   F77@(rt)( &fuplo, &F77N,        SADD alpha, A,          X, &F77incx,
@ROUT ATL_f77symv ATL_f77hemv ATL_f77sbmv ATL_f77hbmv ATL_f77spmv ATL_f77hpmv
            SADD beta, Y, &F77incy );
#else
   (void) fprintf( stderr, "\n\nF77/C interface not defined!!\n\n" );
   exit( -1 );
#endif
}
@ROUT ATL_f77trmv
@define rt @trmv@
@ROUT ATL_f77trsv
@define rt @trsv@
@ROUT ATL_f77tbmv
@define rt @tbmv@
@ROUT ATL_f77tbsv
@define rt @tbsv@
@ROUT ATL_f77tpmv
@define rt @tpmv@
@ROUT ATL_f77tpsv
@define rt @tpsv@
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv ATL_f77tpmv ATL_f77tpsv 
@extract -b @(topd)/gen.inc what=cw @(aw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"
 
void Mjoin( PATL, f77@(rt) )
(
   const enum ATLAS_UPLO     UPLO,
   const enum ATLAS_TRANS    TRANS,
   const enum ATLAS_DIAG     DIAG,
   const int                 N,
@ROUT ATL_f77tbmv ATL_f77tbsv
   const int                 K,
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv ATL_f77tpmv ATL_f77tpsv
   const TYPE                * A,
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv
   const int                 LDA,
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv ATL_f77tpmv ATL_f77tpsv
   TYPE                      * X,
   const int                 INCX
)
{
#if defined( StringSunStyle )
   #if defined( ATL_FunkyInts )
   F77_INTEGER               ONE = 1;
   #else
   int                       ONE = 1;
   #endif
#elif defined( StringStructVal ) || defined( StringStructPtr )
   F77_CHAR                  fuplo, ftran, fdiag;
#elif defined( StringCrayStyle )
   F77_CHAR                  fuplo, ftran, fdiag;
#endif

   char                      cuplo, ctran, cdiag;

#ifdef ATL_FunkyInts
@ROUT ATL_f77trmv ATL_f77trsv
   const F77_INTEGER         F77N = N,           F77lda = LDA, F77incx = INCX;
@ROUT ATL_f77tbmv ATL_f77tbsv 
   const F77_INTEGER         F77N = N, F77K = K, F77lda = LDA, F77incx = INCX;
@ROUT ATL_f77tpmv ATL_f77tpsv
   const F77_INTEGER         F77N = N,                         F77incx = INCX;
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv ATL_f77tpmv ATL_f77tpsv
#else
   #define F77N              N
@ROUT ATL_f77tbmv ATL_f77tbsv
   #define F77K              K
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv
   #define F77lda            LDA
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv ATL_f77tpmv ATL_f77tpsv
   #define F77incx           INCX
#endif

   if(      UPLO  == AtlasUpper   ) cuplo = 'U';
   else                             cuplo = 'L';

   if(      DIAG  == AtlasNonUnit ) cdiag = 'N';
   else                             cdiag = 'U';

   if(      TRANS == AtlasNoTrans ) ctran = 'N';
   else if( TRANS == AtlasTrans   ) ctran = 'T';
   else                             ctran = 'C';

   if( INCX < 0 ) X -= ( ( 1 - N ) ) * INCX SHIFT;

#if defined(StringSunStyle)
@ROUT ATL_f77tbmv ATL_f77tbsv
   F77@(rt)( &cuplo, &ctran, &cdiag, &F77N, &F77K, A, &F77lda, X, &F77incx,
@ROUT ATL_f77trmv ATL_f77trsv
   F77@(rt)( &cuplo, &ctran, &cdiag, &F77N,        A, &F77lda, X, &F77incx,
@ROUT ATL_f77tpmv ATL_f77tpsv
   F77@(rt)( &cuplo, &ctran, &cdiag, &F77N,        A,          X, &F77incx,
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv ATL_f77tpmv ATL_f77tpsv
            ONE, ONE, ONE );
#elif defined(StringCrayStyle)
   ftran = ATL_C2F_TransChar( ctran );
   fdiag = ATL_C2F_TransChar( cdiag );
   fuplo = ATL_C2F_TransChar( cuplo );
@ROUT ATL_f77tbmv ATL_f77tbsv
   F77@(rt)( fuplo,  ftran,  fdiag,  &F77N, &F77K, A, &F77lda, X, &F77incx );
@ROUT ATL_f77trmv ATL_f77trsv
   F77@(rt)( fuplo,  ftran,  fdiag,  &F77N,        A, &F77lda, X, &F77incx );
@ROUT ATL_f77tpmv ATL_f77tpsv
   F77@(rt)( fuplo,  ftran,  fdiag,  &F77N,        A,          X, &F77incx );
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv ATL_f77tpmv ATL_f77tpsv
#elif defined(StringStructVal)
   fuplo.len = 1; fuplo.cp = &cuplo;
   ftran.len = 1; ftran.cp = &ctran;
   fdiag.len = 1; fdiag.cp = &cdiag;
@ROUT ATL_f77tbmv ATL_f77tbsv
   F77@(rt)( fuplo,  ftran,  fdiag,  &F77N, &F77K, A, &F77lda, X, &F77incx );
@ROUT ATL_f77trmv ATL_f77trsv
   F77@(rt)( fuplo,  ftran,  fdiag,  &F77N,        A, &F77lda, X, &F77incx );
@ROUT ATL_f77tpmv ATL_f77tpsv
   F77@(rt)( fuplo,  ftran,  fdiag,  &F77N,        A,          X, &F77incx );
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv ATL_f77tpmv ATL_f77tpsv
#elif defined(StringStructPtr)
   fuplo.len = 1; fuplo.cp = &cuplo;
@ROUT ATL_f77tbmv ATL_f77tbsv
   F77@(rt)( &fuplo, &ftran, &fdiag, &F77N, &F77K, A, &F77lda, X, &F77incx );
@ROUT ATL_f77trmv ATL_f77trsv
   F77@(rt)( &fuplo, &ftran, &fdiag, &F77N,        A, &F77lda, X, &F77incx );
@ROUT ATL_f77tpmv ATL_f77tpsv
   F77@(rt)( &fuplo, &ftran, &fdiag, &F77N,        A,          X, &F77incx );
@ROUT ATL_f77trmv ATL_f77trsv ATL_f77tbmv ATL_f77tbsv ATL_f77tpmv ATL_f77tpsv
   ftran.len = 1; ftran.cp = &ctran;
   fdiag.len = 1; fdiag.cp = &cdiag;
#else
   (void) fprintf( stderr, "\n\nF77/C interface not defined!!\n\n" );
   exit(-1);
#endif
}
@ROUT ATL_f77ger
   @define pp @@
@ROUT ATL_f77geru
   @define pp @u@
@ROUT ATL_f77gerc
   @define pp @c@
@ROUT ATL_f77ger ATL_f77geru ATL_f77gerc
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

#define f77ger Mjoin(PATL,f77ger@(pp))
#define F77GER F77ger@(pp)
void f77ger(const int M, const int N, const SCALAR alpha0,
            const TYPE *X, const int incX, const TYPE *Y, const int incY,
            TYPE *A, const int lda)
{
   #ifdef TCPLX
      TYPE alpha[2];
   #else
      TYPE alpha = alpha0;
   #endif
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77M=M, F77N=N, F77lda=lda, F77incx=incX, F77incy=incY;
   #else
      #define F77M    M
      #define F77N    N
      #define F77lda  lda
      #define F77incx incX
      #define F77incy incY
   #endif
   #ifdef TCPLX
      alpha[0] = *alpha0; alpha[1] = alpha0[1];
   #endif
   if (incX < 0) X -= (1-M)*incX SHIFT;
   if (incY < 0) Y -= (1-N)*incY SHIFT;

   F77GER(&F77M, &F77N, SADD alpha, X, &F77incx, Y, &F77incy, A, &F77lda);
}
@ROUT ATL_f77syr
@define rt @syr@
@ROUT ATL_f77her
@define rt @her@
@ROUT ATL_f77spr
@define rt @spr@
@ROUT ATL_f77hpr
@define rt @hpr@
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const enum ATLAS_UPLO     UPLO,
   const int                 N,
@ROUT ATL_f77syr ATL_f77spr
   const SCALAR              ALPHA,
@ROUT ATL_f77her ATL_f77hpr
   const TYPE                ALPHA,
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr
   const TYPE                * X,
   const int                 INCX,
@ROUT ATL_f77syr ATL_f77her
   TYPE                      * A,
   const int                 LDA
@ROUT ATL_f77spr ATL_f77hpr
   TYPE                      * A
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr
)
{
#if defined( StringSunStyle )
   #if defined( ATL_FunkyInts )
   F77_INTEGER               ONE = 1;
   #else
   int                       ONE = 1;
   #endif
#elif defined( StringStructVal ) || defined( StringStructPtr )
   F77_CHAR                  fuplo;
#elif defined( StringCrayStyle )
   F77_CHAR                  fuplo;
#endif 
   
   char                      cuplo; 

#ifdef ATL_FunkyInts
@ROUT ATL_f77syr ATL_f77her
   const F77_INTEGER         F77N = N, F77lda  = LDA, F77incx = INCX;
@ROUT ATL_f77spr ATL_f77hpr
   const F77_INTEGER         F77N = N,                F77incx = INCX;
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr
#else 
   #define F77N              N
@ROUT ATL_f77syr ATL_f77her 
   #define F77lda            LDA
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr
   #define F77incx           INCX
#endif

@ROUT ATL_f77syr ATL_f77spr
#ifdef TCPLX
   TYPE                      alpha[2];

   *alpha = *ALPHA; alpha[1] = ALPHA[1];
#else
   TYPE                      alpha = ALPHA;
#endif
@ROUT ATL_f77her ATL_f77hpr
   TYPE                      alpha = ALPHA;
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr

   if( UPLO == AtlasUpper ) cuplo = 'U';
   else                     cuplo = 'L';

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;

#if   defined( StringSunStyle  )
@ROUT ATL_f77syr
   F77@(rt)( &cuplo, &F77N, SADD alpha, X, &F77incx, A, &F77lda, ONE );
@ROUT ATL_f77her
   F77@(rt)( &cuplo, &F77N, &alpha,     X, &F77incx, A, &F77lda, ONE );
@ROUT ATL_f77spr
   F77@(rt)( &cuplo, &F77N, SADD alpha, X, &F77incx, A,          ONE );
@ROUT ATL_f77hpr
   F77@(rt)( &cuplo, &F77N, &alpha,     X, &F77incx, A,          ONE );
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr
#elif defined( StringCrayStyle )
   fuplo = ATL_C2F_TransChar( cuplo );
@ROUT ATL_f77syr
   F77@(rt)( fuplo,  &F77N, SADD alpha, X, &F77incx, A, &F77lda );
@ROUT ATL_f77her
   F77@(rt)( fuplo,  &F77N, &alpha,     X, &F77incx, A, &F77lda );
@ROUT ATL_f77spr
   F77@(rt)( fuplo,  &F77N, SADD alpha, X, &F77incx, A          );
@ROUT ATL_f77hpr
   F77@(rt)( fuplo,  &F77N, &alpha,     X, &F77incx, A          );
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr
#elif defined( StringStructVal )
   fuplo.len = 1; fuplo.cp = &cuplo;
@ROUT ATL_f77syr
   F77@(rt)( fuplo,  &F77N, SADD alpha, X, &F77incx, A, &F77lda );
@ROUT ATL_f77her
   F77@(rt)( fuplo,  &F77N, &alpha,     X, &F77incx, A, &F77lda );
@ROUT ATL_f77spr
   F77@(rt)( fuplo,  &F77N, SADD alpha, X, &F77incx, A          );
@ROUT ATL_f77hpr
   F77@(rt)( fuplo,  &F77N, &alpha,     X, &F77incx, A          );
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr
#elif defined( StringStructPtr )
   fuplo.len = 1; fuplo.cp = &cuplo;
@ROUT ATL_f77syr
   F77@(rt)( &fuplo, &F77N, SADD alpha, X, &F77incx, A, &F77lda );
@ROUT ATL_f77her
   F77@(rt)( &fuplo, &F77N, &alpha,     X, &F77incx, A, &F77lda );
@ROUT ATL_f77spr
   F77@(rt)( &fuplo, &F77N, SADD alpha, X, &F77incx, A          );
@ROUT ATL_f77hpr
   F77@(rt)( &fuplo, &F77N, &alpha,     X, &F77incx, A          );
@ROUT ATL_f77syr ATL_f77her ATL_f77spr ATL_f77hpr
#else
   (void) fprintf( stderr, "\n\nF77/C interface not defined!!\n\n" );
   exit( -1 );
#endif
}
@ROUT ATL_f77syr2
@define rt @syr2@
@ROUT ATL_f77her2
@define rt @her2@
@ROUT ATL_f77spr2
@define rt @spr2@
@ROUT ATL_f77hpr2
@define rt @hpr2@
@ROUT ATL_f77syr2 ATL_f77her2 ATL_f77spr2 ATL_f77hpr2
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(  
   const enum ATLAS_UPLO     UPLO,
   const int                 N,
   const SCALAR              ALPHA,
   const TYPE                * X,
   const int                 INCX,
   const TYPE                * Y,
   const int                 INCY,
@ROUT ATL_f77syr2 ATL_f77her2
   TYPE                      * A,
   const int                 LDA
@ROUT ATL_f77spr2 ATL_f77hpr2
   TYPE                      * A
@ROUT ATL_f77syr2 ATL_f77her2 ATL_f77spr2 ATL_f77hpr2
)
{
#if defined( StringSunStyle )
   #if defined( ATL_FunkyInts )
   F77_INTEGER               ONE = 1;
   #else
   int                       ONE = 1;
   #endif
#elif defined( StringStructVal ) || defined( StringStructPtr )
   F77_CHAR                  fuplo;
#elif defined( StringCrayStyle )
   F77_CHAR                  fuplo;
#endif

   char                      cuplo;

#ifdef ATL_FunkyInts
@ROUT ATL_f77syr2 ATL_f77her2
   const F77_INTEGER         F77N    = N,    F77lda  = LDA,
                             F77incx = INCX, F77incy = INCY;
@ROUT ATL_f77spr2 ATL_f77hpr2
   const F77_INTEGER         F77N    = N,
                             F77incx = INCX, F77incy = INCY;
@ROUT ATL_f77syr2 ATL_f77her2 ATL_f77spr2 ATL_f77hpr2
#else
   #define F77N              N
@ROUT ATL_f77syr2 ATL_f77her2
   #define F77lda            LDA
@ROUT ATL_f77syr2 ATL_f77her2 ATL_f77spr2 ATL_f77hpr2
   #define F77incx           INCX
   #define F77incy           INCY
#endif

#ifdef TCPLX
   TYPE                      alpha[2];

   *alpha = *ALPHA; alpha[1] = ALPHA[1];
#else
   TYPE                      alpha = ALPHA;
#endif

   if( UPLO == AtlasUpper ) cuplo = 'U';
   else                     cuplo = 'L';

   if( INCX < 0 ) X -= ( ( 1 - N ) * INCX ) SHIFT;
   if( INCY < 0 ) Y -= ( ( 1 - N ) * INCY ) SHIFT;

#if   defined( StringSunStyle  )
@ROUT ATL_f77syr2 ATL_f77her2
   F77@(rt)( &cuplo, &F77N, SADD alpha, X, &F77incx, Y, &F77incy, A, &F77lda,
@ROUT ATL_f77spr2 ATL_f77hpr2
   F77@(rt)( &cuplo, &F77N, SADD alpha, X, &F77incx, Y, &F77incy, A,
@ROUT ATL_f77syr2 ATL_f77her2 ATL_f77spr2 ATL_f77hpr2
            ONE );
#elif defined( StringCrayStyle )
   fuplo = ATL_C2F_TransChar( cuplo );
@ROUT ATL_f77syr2 ATL_f77her2
   F77@(rt)( fuplo,  &F77N, SADD alpha, X, &F77incx, Y, &F77incy, A, &F77lda );
@ROUT ATL_f77spr2 ATL_f77hpr2
   F77@(rt)( fuplo,  &F77N, SADD alpha, X, &F77incx, Y, &F77incy, A          );
@ROUT ATL_f77syr2 ATL_f77her2 ATL_f77spr2 ATL_f77hpr2
#elif defined( StringStructVal )
   fuplo.len = 1; fuplo.cp = &cuplo;
@ROUT ATL_f77syr2 ATL_f77her2
   F77@(rt)( fuplo,  &F77N, SADD alpha, X, &F77incx, Y, &F77incy, A, &F77lda );
@ROUT ATL_f77spr2 ATL_f77hpr2
   F77@(rt)( fuplo,  &F77N, SADD alpha, X, &F77incx, Y, &F77incy, A          );
@ROUT ATL_f77syr2 ATL_f77her2 ATL_f77spr2 ATL_f77hpr2
#elif defined( StringStructPtr )
   fuplo.len = 1; fuplo.cp = &cuplo;
@ROUT ATL_f77syr2 ATL_f77her2
   F77@(rt)( &fuplo, &F77N, SADD alpha, X, &F77incx, Y, &F77incy, A, &F77lda );
@ROUT ATL_f77spr2 ATL_f77hpr2
   F77@(rt)( &fuplo, &F77N, SADD alpha, X, &F77incx, Y, &F77incy, A          );
@ROUT ATL_f77syr2 ATL_f77her2 ATL_f77spr2 ATL_f77hpr2
#else
   (void) fprintf( stderr, "\n\nF77/C interface not defined!!\n\n" );
   exit( -1 );
#endif
}
@ROUT ATL_f77gemm
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

#define F77GEMM F77gemm
#define f77gemm Mjoin(PATL,f77gemm)

void f77gemm(const enum ATLAS_TRANS TA, const enum ATLAS_TRANS TB,
             const int M, const int N, const int K, const SCALAR alpha,
             const TYPE *A, const int lda, const TYPE *B, const int ldb,
             const SCALAR beta, TYPE *C, const int ldc)
{
   #if defined(StringSunStyle)
      #if defined(ATL_FunkyInts)
         F77_INTEGER ONE=1;
      #else
         int ONE=1;
      #endif
   #elif defined(StringStructVal) || defined(StringStructPtr) || defined(StringCrayStyle)
      F77_CHAR fta;
      F77_CHAR ftb;
   #endif
   #ifdef ATL_FunkyInts
      const F77_INTEGER F77M=M, F77N=N, F77K=K, F77lda=lda, F77ldb=ldb, 
                        F77ldc=ldc;
   #else
      #define F77M M
      #define F77N N
      #define F77K K
      #define F77lda lda
      #define F77ldb ldb
      #define F77ldc ldc
   #endif
   char cta, ctb;
   if (TA == AtlasNoTrans) cta = 'N';
   else if (TA == AtlasTrans) cta = 'T';
   else if (TA == AtlasConjTrans) cta = 'C';
   if (TB == AtlasNoTrans) ctb = 'N';
   else if (TB == AtlasTrans) ctb = 'T';
   else if (TB == AtlasConjTrans) ctb = 'C';

   #if defined(StringSunStyle)
      F77GEMM(&cta, &ctb, &F77M, &F77N, &F77K, SADD alpha, A, &F77lda, 
              B, &F77ldb, SADD beta, C, &F77ldc, ONE, ONE);
   #elif defined(StringCrayStyle)
      fta = ATL_C2F_TransChar(cta);
      ftb = ATL_C2F_TransChar(ctb);
      F77GEMM(fta, ftb, &F77M, &F77N, &F77K, SADD alpha, A, &F77lda, B, &F77ldb,
              SADD beta, C, &F77ldc);
   #elif defined(StringStructVal)
      fta.len = ftb.len = 1;
      fta.cp = &cta; ftb.cp = &ctb;
      F77GEMM(fta, ftb, &F77M, &F77N, &F77K, SADD alpha, A, &F77lda, B, &F77ldb,
              SADD beta, C, &F77ldc);
   #elif defined(StringStructPtr)
      fta.len = ftb.len = 1;
      fta.cp = &cta; ftb.cp = &ctb;
      F77GEMM(&fta, &ftb, &F77M, &F77N, &F77K, SADD alpha, A, &F77lda, 
              B, &F77ldb, SADD beta, C, &F77ldc);
   #else
      fprintf(stderr, "\n\nF77/C interface not defined!!\n\n");
      exit(-1);
   #endif
}
@ROUT ATL_f77hemm
@define rt @hemm@
@ROUT ATL_f77symm
@define rt @symm@
@ROUT ATL_f77hemm ATL_f77symm
@extract -b @(topd)/gen.inc what=cw @(aw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const enum ATLAS_SIDE     SIDE,
   const enum ATLAS_UPLO     UPLO,
   const int                 M,
   const int                 N,
   const SCALAR              ALPHA,
   const TYPE                * A,
   const int                 LDA,
   const TYPE                * B,
   const int                 LDB,
   const SCALAR              BETA,
   TYPE                      * C,
   const int                 LDC
)
{
#if defined( StringSunStyle )
   #if defined( ATL_FunkyInts )
   F77_INTEGER               ONE = 1;
   #else
   int                       ONE = 1;
   #endif
#elif defined( StringStructVal ) || defined( StringStructPtr )
   F77_CHAR                  fside;
   F77_CHAR                  fuplo;
#elif defined( StringCrayStyle )
   F77_CHAR                  fside;
   F77_CHAR                  fuplo;
#endif

   char                      cside, cuplo;

#ifdef ATL_FunkyInts
   const F77_INTEGER         F77M   = M,   F77N   = N,
                             F77lda = LDA, F77ldb = LDB, F77ldc = LDC;
#else
   #define F77M              M
   #define F77N              N
   #define F77lda            LDA
   #define F77ldb            LDB
   #define F77ldc            LDC
#endif

#ifdef TCPLX
   TYPE                      alpha[2], beta[2];

   *alpha = *ALPHA; alpha[1] = ALPHA[1];
   *beta  = *BETA;  beta [1] = BETA [1];
#else
   TYPE                      alpha = ALPHA, beta = BETA;
#endif

   if( SIDE == AtlasRight ) cside = 'R';
   else                     cside = 'L';

   if( UPLO == AtlasLower ) cuplo = 'L';
   else                     cuplo = 'U';

#if   defined( StringSunStyle  )
   F77@(rt)( &cside, &cuplo, &F77M, &F77N, SADD alpha, A, &F77lda,
            B, &F77ldb, SADD beta, C, &F77ldc, ONE, ONE );
#elif defined( StringCrayStyle )
   fside = ATL_C2F_TransChar( cside );
   fuplo = ATL_C2F_TransChar( cuplo );
   F77@(rt)( fside,  fuplo,  &F77M, &F77N, SADD alpha, A, &F77lda,
            B, &F77ldb, SADD beta, C, &F77ldc );
#elif defined( StringStructVal )
   fside.len = 1; fside.cp = &cside;
   fuplo.len = 1; fuplo.cp = &cuplo;
   F77@(rt)( fside,  fuplo,  &F77M, &F77N, SADD alpha, A, &F77lda,
            B, &F77ldb, SADD beta, C, &F77ldc );
#elif defined( StringStructPtr )
   fside.len = 1; fside.cp = &cside;
   fuplo.len = 1; fuplo.cp = &cuplo;
   F77@(rt)( &fside, &fuplo, &F77M, &F77N, SADD alpha, A, &F77lda,
            B, &F77ldb, SADD beta, C, &F77ldc );
#else
   (void) fprintf( stderr, "\n\nF77/C interface not defined!!\n\n" );
   exit( -1 );
#endif
}
@ROUT ATL_f77syr2k
@define rt @syr2k@
@ROUT ATL_f77her2k
@define rt @her2k@
@ROUT ATL_f77syr2k ATL_f77her2k
@extract -b @(topd)/gen.inc what=cw @(aw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const enum ATLAS_UPLO     UPLO,
   const enum ATLAS_TRANS    TRANS,
   const int                 N,
   const int                 K,
   const SCALAR              ALPHA,
   const TYPE                * A,
   const int                 LDA,
   const TYPE                * B,
   const int                 LDB,
@ROUT ATL_f77syr2k
   const SCALAR              BETA,
@ROUT ATL_f77her2k
   const TYPE                BETA,
@ROUT ATL_f77syr2k ATL_f77her2k
   TYPE                      * C,
   const int                 LDC
)
{
#if defined( StringSunStyle )
   #if defined( ATL_FunkyInts )
   F77_INTEGER               ONE = 1;
   #else
   int                       ONE = 1;
   #endif
#elif defined( StringStructVal ) || defined( StringStructPtr )
   F77_CHAR                  fuplo;
   F77_CHAR                  ftran;
#elif defined( StringCrayStyle )
   F77_CHAR                  fuplo;
   F77_CHAR                  ftran;
#endif

   char                      ctran, cuplo;

#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N   = N,   F77K   = K,
                             F77lda = LDA, F77ldb = LDB, F77ldc = LDC;
#else
   #define F77N              N
   #define F77K              K
   #define F77lda            LDA
   #define F77ldb            LDB
   #define F77ldc            LDC
#endif

@ROUT ATL_f77syr2k
#ifdef TCPLX
   TYPE                      alpha[2], beta[2];

   *alpha = *ALPHA; alpha[1] = ALPHA[1];
   *beta  = *BETA;  beta [1] = BETA [1];
#else
   TYPE                      alpha = ALPHA, beta = BETA;
#endif
@ROUT ATL_f77her2k
   TYPE                      alpha[2], beta = BETA;

   *alpha = *ALPHA; alpha[1] = ALPHA[1];
@ROUT ATL_f77syr2k ATL_f77her2k

   if(      UPLO  == AtlasLower     ) cuplo = 'L';
   else                               cuplo = 'U';

@ROUT ATL_f77syr2k
#ifdef TREAL
   if(      TRANS == AtlasNoTrans   ) ctran = 'N';
   else if( TRANS == AtlasTrans     ) ctran = 'T';
   else                               ctran = 'C';
#else
   if(      TRANS == AtlasNoTrans   ) ctran = 'N';
   else                               ctran = 'T';
#endif
@ROUT ATL_f77her2k
   if(      TRANS == AtlasNoTrans   ) ctran = 'N';
   else                               ctran = 'C';
@ROUT ATL_f77syr2k ATL_f77her2k

#if   defined( StringSunStyle  )
@ROUT ATL_f77syr2k
   F77@(rt)( &cuplo, &ctran, &F77N, &F77K, SADD alpha, A, &F77lda,
             B, &F77ldb, SADD beta, C, &F77ldc, ONE, ONE );
@ROUT ATL_f77her2k
   F77@(rt)( &cuplo, &ctran, &F77N, &F77K, SADD alpha, A, &F77lda,
             B, &F77ldb, &beta,     C, &F77ldc, ONE, ONE );
@ROUT ATL_f77syr2k ATL_f77her2k
#elif defined( StringCrayStyle )
   fuplo = ATL_C2F_TransChar( cuplo );
   ftran = ATL_C2F_TransChar( ctran );
@ROUT ATL_f77syr2k
   F77@(rt)( fuplo,  ftran,  &F77N, &F77K, SADD alpha, A, &F77lda,
             B, &F77ldb, SADD beta, C, &F77ldc );
@ROUT ATL_f77her2k
   F77@(rt)( fuplo,  ftran,  &F77N, &F77K, SADD alpha, A, &F77lda,
             B, &F77ldb, &beta,     C, &F77ldc );
@ROUT ATL_f77syr2k ATL_f77her2k
#elif defined( StringStructVal )
   fuplo.len = 1; fuplo.cp = &cuplo;
   ftran.len = 1; ftran.cp = &ctran;
@ROUT ATL_f77syr2k
   F77@(rt)( fuplo,  ftran,  &F77N, &F77K, SADD alpha, A, &F77lda,
             B, &F77ldb, SADD beta, C, &F77ldc );
@ROUT ATL_f77her2k
   F77@(rt)( fuplo,  ftran,  &F77N, &F77K, SADD alpha, A, &F77lda,
             B, &F77ldb, &beta,     C, &F77ldc );
@ROUT ATL_f77syr2k ATL_f77her2k
#elif defined( StringStructPtr )
   fuplo.len = 1; fuplo.cp = &cuplo;
   ftran.len = 1; ftran.cp = &ctran;
@ROUT ATL_f77syr2k
   F77@(rt)( &fuplo, &ftran, &F77N, &F77K, SADD alpha, A, &F77lda,
             B, &F77ldb, SADD beta, C, &F77ldc );
@ROUT ATL_f77her2k
   F77@(rt)( &fuplo, &ftran, &F77N, &F77K, SADD alpha, A, &F77lda,
             B, &F77ldb, &beta,     C, &F77ldc );
@ROUT ATL_f77syr2k ATL_f77her2k
#else
   (void) fprintf( stderr, "\n\nF77/C interface not defined!!\n\n" );
   exit( -1 );
#endif
}
@ROUT ATL_f77syrk
@define rt @syrk@
@ROUT ATL_f77herk
@define rt @herk@
@ROUT ATL_f77syrk ATL_f77herk
@extract -b @(topd)/gen.inc what=cw @(aw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const enum ATLAS_UPLO     UPLO,
   const enum ATLAS_TRANS    TRANS,
   const int                 N,
   const int                 K,
@ROUT ATL_f77syrk
   const SCALAR              ALPHA,
@ROUT ATL_f77herk
   const TYPE                ALPHA,
@ROUT ATL_f77syrk ATL_f77herk
   const TYPE                * A,
   const int                 LDA,
@ROUT ATL_f77syrk
   const SCALAR              BETA,
@ROUT ATL_f77herk
   const TYPE                BETA,
@ROUT ATL_f77syrk ATL_f77herk
   TYPE                      * C,
   const int                 LDC
)
{
#if defined( StringSunStyle )
   #if defined( ATL_FunkyInts )
   F77_INTEGER               ONE = 1;
   #else
   int                       ONE = 1;
   #endif
#elif defined( StringStructVal ) || defined( StringStructPtr )
   F77_CHAR                  fuplo;
   F77_CHAR                  ftran;
#elif defined( StringCrayStyle )
   F77_CHAR                  fuplo;
   F77_CHAR                  ftran;
#endif

   char                      cuplo, ctran;

#ifdef ATL_FunkyInts
   const F77_INTEGER         F77N   = N,   F77K   = K,
                             F77lda = LDA, F77ldc = LDC;
#else
   #define F77N              N
   #define F77K              K
   #define F77lda            LDA
   #define F77ldc            LDC
#endif

@ROUT ATL_f77syrk
#ifdef TCPLX
   TYPE                      alpha[2], beta [2];

   *alpha = *ALPHA; alpha[1] = ALPHA[1];
   *beta  = *BETA;  beta [1] = BETA [1];
#else
   TYPE                      alpha = ALPHA, beta = BETA;
#endif
@ROUT ATL_f77herk
   TYPE                      alpha = ALPHA, beta = BETA;
@ROUT ATL_f77syrk ATL_f77herk

   if(      UPLO  == AtlasLower   ) cuplo = 'L';
   else                             cuplo = 'U';

@ROUT ATL_f77syrk
#ifdef TREAL
   if(      TRANS == AtlasNoTrans ) ctran = 'N';
   else if( TRANS == AtlasTrans   ) ctran = 'T';
   else                             ctran = 'C';
#else
   if(      TRANS == AtlasNoTrans ) ctran = 'N';
   else                             ctran = 'T';
#endif
@ROUT ATL_f77herk
   if(      TRANS == AtlasNoTrans ) ctran = 'N';
   else                             ctran = 'C';
@ROUT ATL_f77syrk ATL_f77herk

#if   defined( StringSunStyle  )
@ROUT ATL_f77syrk
   F77@(rt)( &cuplo, &ctran, &F77N, &F77K, SADD alpha, A, &F77lda,
            SADD beta, C, &F77ldc, ONE, ONE );
@ROUT ATL_f77herk
   F77@(rt)( &cuplo, &ctran, &F77N, &F77K, &alpha,     A, &F77lda,
            &beta,     C, &F77ldc, ONE, ONE );
@ROUT ATL_f77syrk ATL_f77herk
#elif defined( StringCrayStyle )
   fuplo = ATL_C2F_TransChar( cuplo );
   ftran = ATL_C2F_TransChar( ctran );
@ROUT ATL_f77syrk
   F77@(rt)( fuplo,  ftran,  &F77N, &F77K, SADD alpha, A, &F77lda,
            SADD beta, C, &F77ldc );
@ROUT ATL_f77herk
   F77@(rt)( fuplo,  ftran,  &F77N, &F77K, &alpha,     A, &F77lda,
            &beta,     C, &F77ldc );
@ROUT ATL_f77syrk ATL_f77herk
#elif defined( StringStructVal )
   fuplo.len = 1; fuplo.cp = &cuplo;
   ftran.len = 1; ftran.cp = &ctran;
@ROUT ATL_f77syrk
   F77@(rt)( fuplo,  ftran,  &F77N, &F77K, SADD alpha, A, &F77lda,
            SADD beta, C, &F77ldc );
@ROUT ATL_f77herk
   F77@(rt)( fuplo,  ftran,  &F77N, &F77K, &alpha,     A, &F77lda,
            &beta,     C, &F77ldc );
@ROUT ATL_f77syrk ATL_f77herk
#elif defined( StringStructPtr )
   fuplo.len = 1; fuplo.cp = &cuplo;
   ftran.len = 1; ftran.cp = &ctran;
@ROUT ATL_f77syrk
   F77@(rt)( &fuplo, &ftran, &F77N, &F77K, SADD alpha, A, &F77lda,
            SADD beta, C, &F77ldc );
@ROUT ATL_f77herk
   F77@(rt)( &fuplo, &ftran, &F77N, &F77K, &alpha,     A, &F77lda,
            &beta,     C, &F77ldc );
@ROUT ATL_f77syrk ATL_f77herk
#else
   (void) fprintf( stderr, "\n\nF77/C interface not defined!!\n\n" );
   exit( -1 );
#endif
}
@ROUT ATL_f77trsm
@define rt @trsm@
@ROUT ATL_f77trmm
@define rt @trmm@
@ROUT ATL_f77trsm ATL_f77trmm
@extract -b @(topd)/gen.inc what=cw @(aw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_f77blas.h"

void Mjoin( PATL, f77@(rt) )
(
   const enum ATLAS_SIDE     SIDE,
   const enum ATLAS_UPLO     UPLO,
   const enum ATLAS_TRANS    TRANS,
   const enum ATLAS_DIAG     DIAG,
   const int                 M,
   const int                 N,
   const SCALAR              ALPHA,
   const TYPE                * A,
   const int                 LDA,
   TYPE                      * B,
   const int                 LDB
)
{
#if defined( StringSunStyle )
   #if defined( ATL_FunkyInts )
   F77_INTEGER               ONE = 1;
   #else
   int                       ONE = 1;
   #endif
#elif defined( StringStructVal ) || defined( StringStructPtr )
   F77_CHAR                  fside;
   F77_CHAR                  fuplo;
   F77_CHAR                  ftran;
   F77_CHAR                  fdiag;
#elif defined( StringCrayStyle )
   F77_CHAR                  fside;
   F77_CHAR                  fuplo;
   F77_CHAR                  ftran;
   F77_CHAR                  fdiag;
#endif

   char                      cside, cuplo, ctran, cdiag;

#ifdef ATL_FunkyInts
   const F77_INTEGER         F77M   = M,   F77N   = N,
                             F77lda = LDA, F77ldb = LDB;
#else
   #define F77M              M
   #define F77N              N
   #define F77lda            LDA
   #define F77ldb            LDB
#endif

#ifdef TCPLX
   TYPE                      alpha[2];

   *alpha = *ALPHA; alpha[1] = ALPHA[1];
#else
   TYPE                      alpha = ALPHA;
#endif

   if(      TRANS == AtlasNoTrans ) ctran = 'N';
   else if( TRANS == AtlasTrans   ) ctran = 'T';
   else                             ctran = 'C';

   if(       SIDE  == AtlasRight  ) cside = 'R';
   else                             cside = 'L';

   if(       UPLO  == AtlasLower  ) cuplo = 'L';
   else                             cuplo = 'U';

   if(       DIAG  == AtlasUnit   ) cdiag = 'U';
   else                             cdiag = 'N';

#if   defined( StringSunStyle  )
   F77@(rt)( &cside, &cuplo, &ctran, &cdiag, &F77M, &F77N, SADD alpha,
            A, &F77lda, B, &F77ldb, ONE, ONE, ONE, ONE );
#elif defined( StringCrayStyle )
   fside = ATL_C2F_TransChar( cside );
   fuplo = ATL_C2F_TransChar( cuplo );
   ftran = ATL_C2F_TransChar( ctran );
   fdiag = ATL_C2F_TransChar( cdiag );
   F77@(rt)( fside,  fuplo,  ftran,  fdiag,  &F77M, &F77N, SADD alpha,
            A, &F77lda, B, &F77ldb );
#elif defined( StringStructVal )
   fside.len = 1; fside.cp = &cside;
   fuplo.len = 1; fuplo.cp = &cuplo;
   ftran.len = 1; ftran.cp = &ctran;
   fdiag.len = 1; fdiag.cp = &cdiag;
   F77@(rt)( fside,  fuplo,  ftran,  fdiag,  &F77M, &F77N, SADD alpha,
            A, &F77lda, B, &F77ldb );
#elif defined( StringStructPtr )
   fside.len = 1; fside.cp = &cside;
   fuplo.len = 1; fuplo.cp = &cuplo;
   ftran.len = 1; ftran.cp = &ctran;
   fdiag.len = 1; fdiag.cp = &cdiag;
   F77@(rt)( &fside, &fuplo, &ftran, &fdiag, &F77M, &F77N, SADD alpha,
            A, &F77lda, B, &F77ldb );
#else
   (void) fprintf( stderr, "\n\nF77/C interface not defined!!\n\n" );
   exit( -1 );
#endif
}
@ROUT ATL_geprint
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"

void Mjoin(PATL,geprint)
   (char *mat, const int M, const int N, const TYPE *A, const int lda0)
{
   const int lda = lda0 SHIFT;
   int i, j;

   printf("\n%s = \n",mat);
   for (i=0; i != M; i++)
   {
      #ifdef TREAL
         for (j=0; j != N; j++) printf("%f  ",A[i+j*lda]);
      #else
         for (j=0; j != N; j++) 
            printf("(%f,%f)  ",A[2*i+j*lda], A[1+2*i+j*lda]);
      #endif
      printf("\n");
   }
}
@ROUT ATL_gediffnrm1
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"
TYPE Mjoin(PATL,gediffnrm1)
   (const int M, const int N, const TYPE *A, const int lda, 
    const TYPE *B, const int ldb)
/*
 * Calculates the 1-norm of (A-B)
 */
{
   const int lda2 = lda SHIFT, ldb2 = ldb SHIFT;
   const int M2 = M SHIFT;
   int i, j;
   TYPE max=0.0, t0;

   for (j=0; j < N; j++)
   {
      t0 = ATL_rzero;
      for (i=0; i != M2; i++) t0 += Mabs(A[i] - B[i]);
      if (t0 > max) max = t0;
      if (t0 != t0)   /* if we've got a NaN */
         return(t0);  /* report it as norm! */
      A += lda2;
      B += ldb2;
   }
   return(max);
}
@ROUT ATL_sbnrm ATL_hbnrm
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"

@ROUT ATL_sbnrm
TYPE Mjoin(PATL,sbnrm)
@ROUT ATL_hbnrm
TYPE Mjoin(PATL,hbnrm)
@ROUT ATL_sbnrm ATL_hbnrm
(const enum ATLAS_UPLO UPLO, const int N, const int K,
 const TYPE *A, const int LDA)
{
   int                        i, i0, i1, iaij, iy, j, jaj, ky = 0, l,
                              lda2 = (LDA SHIFT);
   TYPE max=ATL_rzero, t0, * work= NULL;
 
   if( N <= 0 ) return( ATL_rzero );
 
   work = (TYPE *)malloc( N * sizeof( TYPE ) );
   if( work == NULL )
   {fprintf( stderr, "mem alloc failed in [sb,hb]nrm, bye ...\n" ); exit( 1 );}
   else { for( i = 0; i < N; i++ ) work[i] = ATL_rzero; }

   if( UPLO == AtlasUpper )
   {
      for( j = 0, jaj = 0; j < N; j++, jaj += lda2 )
      {
         t0      = ATL_rzero;

         l     = K - j;
         i0    = ( j - K > 0 ? j - K : 0 );
 
         for( i = i0, iaij  = ((l+i0) SHIFT)+jaj, iy = ky;
              i < j;  i++, iaij += (1 SHIFT), iy += 1 )
         {
@ROUT ATL_sbnrm
#ifdef TREAL
            work[iy] += Mabs( A[iaij] );
            t0       += Mabs( A[iaij] );
#else
            work[iy] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0       += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
@ROUT ATL_hbnrm
            work[iy] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0       += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
@ROUT ATL_sbnrm ATL_hbnrm
         }
@ROUT ATL_sbnrm
#ifdef TREAL
         work[j] += Mabs( A[iaij] ) + t0;
#else
         work[j] += Mabs( A[iaij] ) + Mabs( A[iaij+1] ) + t0;
#endif
@ROUT ATL_hbnrm
         work[j] += Mabs( A[iaij] ) + t0;
@ROUT ATL_sbnrm ATL_hbnrm

         if( j >= K ) { ky += 1; }
      }
   }
   else
   {
      for( j = 0, jaj = 0; j < N; j++, jaj += lda2 )
      {
         t0      = ATL_rzero;
@ROUT ATL_sbnrm
#ifdef TREAL
         work[j] = Mabs( A[jaj] );
#else
         work[j] = Mabs( A[jaj] ) + Mabs( A[jaj+1] );
#endif
@ROUT ATL_hbnrm
         work[j] = Mabs( A[jaj] );
@ROUT ATL_sbnrm ATL_hbnrm
         i1     = ( N - 1 > j + K ? j + K : N - 1 );
         for( i = j+1, iaij = (1 SHIFT)+jaj; i <= i1; i++,
              iaij += (1 SHIFT) )
         {
@ROUT ATL_sbnrm
#ifdef TREAL
            work[i] += Mabs( A[iaij] );
            t0      += Mabs( A[iaij] );
#else
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
@ROUT ATL_hbnrm
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
@ROUT ATL_sbnrm ATL_hbnrm
         }
         work[j] += t0;
      }
   } 
 
   max = work[0];
   for( j = 1; j < N; j++ ) 
      if (work[j] != work[j] || max < work[j])
         max = work[j];
   if( work ) free( work );
 
   return( max );
}
@ROUT ATL_spnrm ATL_hpnrm
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"

@ROUT ATL_spnrm
TYPE Mjoin(PATL,spnrm)
@ROUT ATL_hpnrm 
TYPE Mjoin(PATL,hpnrm)
@ROUT ATL_spnrm ATL_hpnrm 
(const enum ATLAS_UPLO UPLO, const int N, const TYPE *A)
{
   int                        i, iaij, j;
   TYPE max=ATL_rzero, t0, * work= NULL;
 
   if( N <= 0 ) return( ATL_rzero );
 
   work = (TYPE *)malloc( N * sizeof( TYPE ) );
   if( work == NULL )
   {fprintf( stderr, "mem alloc failed in [sp,hp]nrm, bye ...\n" ); exit( 1 );} 
   else { for( i = 0; i < N; i++ ) work[i] = ATL_rzero; }

   if( UPLO == AtlasUpper )
   {
      for( j = 0, iaij = 0; j < N; j++ )
      {
         work[j] = t0 = ATL_rzero;
 
         for( i = 0; i < j; i++, iaij += (1 SHIFT) )
         {
@ROUT ATL_spnrm
#ifdef TREAL
            work[i] += Mabs( A[iaij] );
            t0      += Mabs( A[iaij] );
#else
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif 
@ROUT ATL_hpnrm 
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
@ROUT ATL_spnrm ATL_hpnrm 
         }
@ROUT ATL_spnrm
#ifdef TREAL
         work[j] += Mabs( A[iaij] ) + t0;
#else
         work[j] += Mabs( A[iaij] ) + Mabs( A[iaij+1] ) + t0;
#endif
@ROUT ATL_hpnrm 
         work[j] += Mabs( A[iaij] ) + t0;
@ROUT ATL_spnrm ATL_hpnrm 
         iaij    += (1 SHIFT);
      }
   }
   else
   {
      for( j = 0, iaij = 0; j < N; j++ )
      {
         t0      = ATL_rzero;
@ROUT ATL_spnrm
#ifdef TREAL
         work[j] = Mabs( A[iaij] );
#else
         work[j] = Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
@ROUT ATL_hpnrm 
         work[j] = Mabs( A[iaij] );
@ROUT ATL_spnrm ATL_hpnrm 

         iaij    += (1 SHIFT);
         for( i = j+1; i < N; i++, iaij += (1 SHIFT) )
         {
@ROUT ATL_spnrm
#ifdef TREAL
            work[i] += Mabs( A[iaij] );
            t0      += Mabs( A[iaij] );
#else
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
@ROUT ATL_hpnrm 
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
@ROUT ATL_spnrm ATL_hpnrm 
         }
         work[j] += t0;
      }
   }
 
   max = work[0];
   for(j = 1; j < N; j++) 
      if (work[j] != work[j] || max < work[j]) 
         max = work[j];
 
   if( work ) free( work );
 
   return( max );
 
} 
@ROUT ATL_synrm ATL_henrm
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"
 
@ROUT ATL_synrm
TYPE Mjoin(PATL,synrm)
@ROUT ATL_henrm
TYPE Mjoin(PATL,henrm)
@ROUT ATL_synrm ATL_henrm
(const enum ATLAS_UPLO UPLO, const int N, const TYPE *A, const int LDA)
{
   int                        i, iaij, j, jaj, lda2 = ( LDA SHIFT ),
                              ldap12 = ( ( LDA + 1 ) SHIFT );
   TYPE max=ATL_rzero, t0, * work= NULL;

   if( N <= 0 ) return( ATL_rzero );

   work = (TYPE *)malloc( N * sizeof( TYPE ) );
   if( work == NULL )
   {fprintf( stderr, "mem alloc failed in [sy,he]nrm, bye ...\n" ); exit( 1 );}
   else { for( i = 0; i < N; i++ ) work[i] = ATL_rzero; }

   if( UPLO == AtlasUpper )
   {
      for( j = 0, jaj = 0; j < N; j++, jaj += lda2 )
      {
         work[j] = t0 = ATL_rzero; 

         for( i = 0, iaij = jaj; i < j; i++, iaij += (1 SHIFT) )
         {
@ROUT ATL_synrm
#ifdef TREAL
            work[i] += Mabs( A[iaij] );
            t0      += Mabs( A[iaij] );
#else
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
@ROUT ATL_henrm
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
@ROUT ATL_synrm ATL_henrm
         }
@ROUT ATL_synrm
#ifdef TREAL
         work[j] += Mabs( A[iaij] ) + t0;
#else
         work[j] += Mabs( A[iaij] ) + Mabs( A[iaij+1] ) + t0;
#endif
@ROUT ATL_henrm
         work[j] += Mabs( A[iaij] ) + t0;
@ROUT ATL_synrm ATL_henrm
      }
   }
   else
   {
      for( j = 0, jaj = 0; j < N; j++, jaj += ldap12 )
      {
         t0      = ATL_rzero; 
@ROUT ATL_synrm
#ifdef TREAL
         work[j] = Mabs( A[jaj] );
#else
         work[j] = Mabs( A[jaj] ) + Mabs( A[jaj+1] );
#endif
@ROUT ATL_henrm
         work[j] = Mabs( A[jaj] );
@ROUT ATL_synrm ATL_henrm
         for( i = j+1, iaij = jaj+(1 SHIFT); i < N; i++, iaij += (1 SHIFT) )
         {
@ROUT ATL_synrm
#ifdef TREAL
            work[i] += Mabs( A[iaij] );
            t0      += Mabs( A[iaij] );
#else
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
@ROUT ATL_henrm
            work[i] += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
            t0      += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
@ROUT ATL_synrm ATL_henrm
         }
         work[j] += t0;
      }
   }

   max = work[0];
   for(j = 1; j < N; j++) 
      if (work[j] != work[j] || max < work[j]) 
         max = work[j];

   if( work ) free( work );

   return( max );
} 
@ROUT ATL_tbnrm1
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"
 
TYPE Mjoin(PATL,tbnrm1)(const enum ATLAS_UPLO UPLO, const enum ATLAS_DIAG DIAG,
                        const int N, const int K, const TYPE *A, const int LDA)
/*
 * Calculates the 1-norm of a triangular band matrix
 */
{
   int i, i0, i1, iaij, j, jaj, l, lda2 = ( LDA SHIFT );
   TYPE max=0.0, t0;

   if( UPLO == AtlasUpper )
   {
      for( j = 0, jaj  = 0; j < N; j++, jaj += lda2 )
      {
         l       = K - j;
         i0      = ( j - K > 0 ? j - K : 0 );

         t0 = ATL_rzero;
         for( i = i0, iaij = ((l+i0) SHIFT)+jaj; i < j; i++, iaij += (1 SHIFT) )
         {
#ifdef TREAL
            t0 += Mabs( A[iaij] );
#else
            t0 += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
         }
         if (t0 != t0)
            return(t0);
         if( DIAG == AtlasNonUnit ) t0 += ATL_rone;

         if (t0 > max) max = t0;
      }
   }
   else
   {
      for( j = N-1, jaj = (N-1)*lda2; j >= 0; j--, jaj -= lda2 )
      {
         t0 = ATL_rzero;
         if( DIAG == AtlasNonUnit ) t0 += ATL_rone;

         i1   = ( N - 1 > j + K ? j + K : N - 1 );
         for( i  = j+1, iaij = (1 SHIFT)+jaj; i <= i1; i++, iaij += (1 SHIFT) )
         {
#ifdef TREAL
            t0 += Mabs( A[iaij] );
#else
            t0 += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
         }
         if (t0 != t0)
            return(t0);
         if (t0 > max) max = t0;
      }
   } 
   return(max);
}
@ROUT ATL_tpnrm1
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"
 
TYPE Mjoin(PATL,tpnrm1)(const enum ATLAS_UPLO UPLO, const enum ATLAS_DIAG DIAG,
                        const int N, const TYPE *A)
/*
 * Calculates the 1-norm of a triangular packed matrix
 */
{
   int i, iaij, j;
   TYPE max=0.0, t0;

   if( UPLO == AtlasUpper )
   {
      for( j = 0, iaij= 0; j < N; j++ )
      {
         t0 = ATL_rzero;
         for( i = 0; i < j; i++, iaij += (1 SHIFT) )
         {
#ifdef TREAL
            t0 += Mabs( A[iaij] );
#else
            t0 += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
         }
         if (t0 != t0)
            return(t0);
         if( DIAG == AtlasNonUnit ) t0 += ATL_rone;
         if (t0 > max) max = t0;
         iaij += (1 SHIFT);
      }
   }
   else
   {
      for( j = N-1, iaij = ((((N-1)*(N+2)) >> 1) SHIFT); j >= 0; j-- )
      {
         t0 = ATL_rzero;
         if( DIAG == AtlasNonUnit ) t0 += ATL_rone;
         iaij += (1 SHIFT);
         for( i = j+1; i < N; i++, iaij += (1 SHIFT) )
         {
#ifdef TREAL
            t0 += Mabs( A[iaij] );
#else
            t0 += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
         }
         if (t0 != t0)
            return(t0);
         if (t0 > max) max = t0;

         iaij -= ( ( N - j ) << (1 SHIFT) ) + (1 SHIFT);
      }
   }
   return( max );
}
@ROUT ATL_trnrm1
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"

TYPE Mjoin(PATL,trnrm1)(const enum ATLAS_UPLO Uplo, const enum ATLAS_DIAG Diag,
                        const int N, const TYPE *A, const int lda)
/*
 * Calculates the 1-norm of a general rectangular matrix
 */
{
   const int incA = (Uplo == AtlasUpper ? (lda SHIFT) : ((lda+1)SHIFT));
   const int ioff = (Diag == AtlasNonUnit ? 1 : 0);
   int j;
   TYPE max=0.0, t0;

   if (Uplo == AtlasUpper)
   {
      for (j=0; j < N; j++)
      {
         t0 = Mjoin(PATL,asum)(j+ioff, A, 1);
         if (t0 != t0)
            return(t0);
         if (Diag == AtlasUnit) t0 += ATL_rone;
         if (t0 > max) max = t0;
         A += incA;
      }
   }
   else
   {
      if (Diag == AtlasUnit) A += 1 SHIFT;
      for (j=N; j; j--)
      {
         t0 = Mjoin(PATL,asum)(j+ioff-1, A, 1);
         if (t0 != t0)
            return(t0);
         if (Diag == AtlasUnit) t0 += ATL_rone;
         if (t0 > max) max = t0;
         A += incA;
      }
   }
   return(max);
}
@ROUT ATL_gbnrm1
@extract -b @(topd)/gen.inc what=cw @(ap99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"
 
TYPE Mjoin(PATL,gbnrm1)(const int M, const int N, const int KL, const int KU,
const TYPE *A, const int LDA)
/*
 * Calculates the 1-norm of a general band rectangular matrix
 */
{
   int i, i0, i1, iaij, j, jaj, k, lda2 = ( LDA SHIFT );
   TYPE max=ATL_rzero, t0;

   for( j = 0, jaj = 0; j < N; j++, jaj += lda2 )
   {
      k  = KU - j;
      i0 = ( j - KU > 0 ? j - KU : 0 );
      i1 = ( M - 1 > j + KL ? j + KL : M - 1 );

      t0 =  ATL_rzero;
      for( i = i0, iaij = ((k+i0) SHIFT)+jaj; i <= i1; i++, iaij += (1 SHIFT) )
      {
#ifdef TREAL
         t0 += Mabs( A[iaij] );
#else
         t0 += Mabs( A[iaij] ) + Mabs( A[iaij+1] );
#endif
      }
      if (t0 != t0)
         return(t0);
      if (t0 > max) max = t0;
   }
   return(max);
} 
@ROUT ATL_genrm1
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"

TYPE Mjoin(PATL,genrm1)(const int M, const int N, const TYPE *A, const int lda)
/*
 * Calculates the 1-norm of a general rectangular matrix
 */
{
   const int lda2 = lda SHIFT;
   int j;
   TYPE max=0.0, t0;

   for (j=0; j < N; j++)
   {
      t0 = Mjoin(PATL,asum)(M, A, 1);
      if (t0 != t0)
         return(t0);
      if (t0 > max) max = t0;
      A += lda2;
   }
   return(max);
}
@ROUT ATL_infnrm
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#include "atlas_level1.h"
TYPE Mjoin(PATL,infnrm)(const int N, const TYPE *X, const int incX)
{
   register TYPE max=0.0;
   register int i;
   if (N > 0)
   {
   #ifdef TCPLX
      const int incX2=incX+incX;
      for (i=0; i < N; i++, X += incX2)
      {
         register TYPE t0;
         t0 = Mabs(*X) + Mabs(X[1]);
         if (t0 != t0)
            return(t0);
         max = (max >= t0) ? max : t0;
      }
   #else
      for (i=0; i < N; i++, X += incX)
      {
         register TYPE t0;
         t0 = Mabs(*X);
         if (t0 != t0)
            return(t0);
         max = (max >= t0) ? max : t0;
      }
   #endif
   }
   return(max);
@beginskip
    int i;
    i = Mjoin(Mjoin(ATL_i,PRE),amax)(N, X, incX);
#ifdef TREAL
    return(Mabs(X[i*incX]));
#else
    i *= (incX<<1);
    return(Mabs(X[i]) + Mabs(X[i+1]));
#endif
@endskip
}
@ROUT ATL_gegen
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#define FILLCONST -2560000000.0

void Mjoin(PATL,gefillgap)
   (const int M, const int N, TYPE *A, const int lda0)
{
   const int lda=lda0 SHIFT, n = lda0 - M;
   int j;

   if (n)
   {
      A += M SHIFT;
      for (j=0; j < N; j++, A += lda)
         Mjoin(PATLU,set)(n SHIFT, FILLCONST, A, 1);
   }
}

int Mjoin(PATL,gechkgap)
   (const int M0, const int N, TYPE *A, const int lda0)
{
   const int M = M0 SHIFT, lda=lda0 SHIFT, n = lda0 - M0;
   int i, j, OVERWRITES=0;
   if (n)
   {
      for (j=0; j < N; j++)
      {
         for (i=M; i < lda; i++)
         {
            if (A[j*lda+i] != FILLCONST)
            {
               fprintf(stderr, "   Overwrite in lda gap, A(%d,%d) = %f!!\n",
                       i, j, A[j*lda+i]);
               OVERWRITES++;
            }
         }
      }
   }
   return(OVERWRITES);
}

void Mjoin(PATL,gegen)
   (const int M0, const int N, TYPE *A, const int lda0, const int seed)
{
   const int M = M0 SHIFT, lda = lda0 SHIFT;
   int i, j;

   dumb_seed(seed);
   Mjoin(PATL,gefillgap)(M0, N, A, lda0);
   for (j=N; j; j--)
   {
      for (i=0; i != M; i++) A[i] = dumb_rand();
      A += lda;
   }
}
@ROUT ATL_trgen
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"
#define FILLCONST -2560000000.0
void Mjoin(PATL,trgen)(const enum ATLAS_UPLO Uplo, const enum ATLAS_DIAG Diag,
                       const int N, TYPE *A, const int lda0, const int seed)
{
   const int M = N SHIFT, lda = lda0 SHIFT;
   int i, j;

   dumb_seed(seed);
   Mjoin(PATL,gefillgap)(N, N, A, lda0);
   if (Uplo == AtlasUpper)
   {
      for (j=0; j != N; j++)
      {
         for (i=0; i != (j SHIFT); i++) A[i] = dumb_rand();
         if (Diag == AtlasNonUnit)
         {
            A[i++] = dumb_rand();
            #ifdef TCPLX
               A[i++] = dumb_rand();
            #endif
         }
         for (; i < M; i++) A[i] = FILLCONST;
         A += lda;
      }
   }
   else
   {
      for (j=0; j != N; j++)
      {
         for (i=0; i != (j SHIFT); i++) A[i] = FILLCONST;
         if (Diag == AtlasNonUnit)
         {
            A[i++] = dumb_rand();
            #ifdef TCPLX
               A[i++] = dumb_rand();
            #endif
         }
         for (; i != M; i++) A[i] = dumb_rand();
         A += lda;
      }
   }
}
@ROUT ATL_epsilon
@extract -b @(topd)/gen.inc what=cw -def author "Jeff Horner" -def contrib "R. Clint Whaley" -def cdate 1998
#include "atlas_misc.h"
#include "atlas_tst.h"

TYPE Mjoin(PATL,epsilon)(void)
{
   static TYPE eps;
   const TYPE half=0.5;
   volatile TYPE maxval, f1=0.5;

   do
   {
      eps = f1;
      f1 *= half;
      maxval = 1.0 + f1;
   }
   while (maxval != 1.0);
   return(eps);
}

@ROUT ATL_vdiff
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"

void Mjoin(PATL,vdiff)(const int N, const TYPE *X, const int incX, 
                       const TYPE *Y, const int incY, TYPE *Z, const int incZ)
/*
 * Z <- X - Y
 */
{
   int i;
   #ifdef TREAL
      for (i=N; i; i--, X += incX, Y += incY, Z += incZ) *Z = *X - *Y;
   #else
      const int incx = incX<<1, incy=incY<<1, incz = incZ<<1;
      for (i=N; i; i--, X += incx, Y += incy, Z += incz) 
      {
         *Z = *X - *Y;
         Z[1] = X[1] - Y[1];
      }
   #endif
}
@ROUT ATL_gediff
@extract -b @(topd)/gen.inc what=cw @(cw99)
#include "atlas_misc.h"
#include "atlas_tst.h"

void Mjoin(PATL,gediff)
   (const int M0, const int N, const TYPE *A, const int lda0, 
    const TYPE *B, const int ldb0, TYPE *C, const int ldc0)
{
   const int M = M0 SHIFT, lda = lda0 SHIFT, ldb = ldb0 SHIFT, ldc = ldc0 SHIFT;
   int i, j;

   for (j=0; j < N; j++)
   {
      for (i=0; i != M; i++) C[i] = A[i] - B[i];
      A += lda;
      B += ldb;
      C += ldc;
   }
}
@ROUT atlas_tst.h
@extract -b @(topd)/gen.inc what=cw @(cp99)

#ifndef ATLAS_TST_H
   #define ATLAS_TST_H

#include "atlas_enum.h"

double time00();
#ifndef UseCRand
   void ATL_srand(int iseed);
   int ATL_rand(void);
   #define dumb_seed(iseed_) ATL_srand(iseed_)
   #define dumb_rand() ( 0.5 - ((double)ATL_rand())/(2147483648.0) )
#else
   #define dumb_seed(iseed_) srand(iseed_)
   #ifndef RAND_MAX  /* rather dangerous non-ansi workaround */
      #define RAND_MAX ((unsigned long)(1<<30))
   #endif
   #define dumb_rand() ( 0.5 - ((double)rand())/((double)RAND_MAX) )
#endif

@multidef styp double@^* float@^* double@^ float@^
@multidef typ double float double float
@whiledef pre z c d s
void ATL_@(pre)tstsqtran(const int N, @(typ) *A, const int lda);
void ATL_@(pre)geprint
   (char *mat, const int M, const int N, const @(typ) *A, const int lda);

@(typ) ATL_@(pre)gediffnrm1
   (const int M, const int N, const @(typ) *A, const int lda, 
    const @(typ) *B, const int ldb);
@(typ) ATL_@(pre)hediffnrm
   (const enum ATLAS_ORDER Order, const enum ATLAS_UPLO Uplo, const int N,
    const @(typ) *A0, const int ld0, const @(typ) *A1, const int ld1);
@(typ) ATL_@(pre)infnrm(const int N, const @(typ) *X, const int incX);
@(typ) ATL_@(pre)genrm1
   (const int M, const int N, const @(typ) *A, const int lda);
@(typ) ATL_@(pre)trnrm1
   (const enum ATLAS_UPLO Upper, const enum ATLAS_DIAG Diag, const int N, 
    const @(typ) *A, const int lda);
@(typ) ATL_@(pre)gbnrm1
   (const int M, const int N, const int KL, const int KU, 
    const @(typ) *A, const int lda);
@(typ) ATL_@(pre)tpnrm1
   (const enum ATLAS_UPLO UPLO, const enum ATLAS_DIAG DIAG, const int N,
    const @(typ) *A);
@(typ) ATL_@(pre)tbnrm1
   (const enum ATLAS_UPLO UPLO, const enum ATLAS_DIAG DIAG, 
    const int N, const int K, const @(typ) *A, const int LDA);
@(typ) ATL_@(pre)synrm
   (const enum ATLAS_UPLO UPLO, const int N, const @(typ) *A, const int LDA);
@(typ) ATL_@(pre)henrm
   (const enum ATLAS_UPLO UPLO, const int N, const @(typ) *A, const int LDA);
@(typ) ATL_@(pre)spnrm
   (const enum ATLAS_UPLO UPLO, const int N, const @(typ) *A);
@(typ) ATL_@(pre)hpnrm
   (const enum ATLAS_UPLO UPLO, const int N, const @(typ) *A);
@(typ) ATL_@(pre)sbnrm
   (const enum ATLAS_UPLO UPLO, const int N, const int K, 
    const @(typ) *A, const int LDA);
@(typ) ATL_@(pre)hbnrm
   (const enum ATLAS_UPLO UPLO, const int N, const int K, 
    const @(typ) *A, const int LDA);

void ATL_@(pre)gefillgap(const int M, const int N, @(typ) *A, const int lda0);
int ATL_@(pre)gechkgap(const int M0, const int N, @(typ) *A, const int lda0);
void ATL_@(pre)trgen(const enum ATLAS_UPLO Uplo, const enum ATLAS_DIAG Diag, 
                const int N, @(typ) *A, const int lda, const int seed);
void ATL_@(pre)gegen(const int M0, const int N, @(typ) *A, const int lda,
                const int seed);
@(typ) ATL_@(pre)epsilon(void);
void ATL_@(pre)vdiff(const int N, const @(typ) *X, const int incX, 
                const @(typ) *Y, const int incY, @(typ) *Z, const int incZ);
void ATL_@(pre)gediff(const int M, const int N, const @(typ) *A, const int lda,
                 const @(typ) *B, const int ldb, @(typ) *C, const int ldc);
   @undef typ
   @undef styp
@endwhile

/*
 * Wrappers so that C can call F77 LAPACK
 */
@multidef styp double@^* float@^* double@^ float@^
@multidef typ double float double float
@whiledef pre z c d s
int ATL_@(pre)f77getri
   (const enum ATLAS_ORDER, const int, @(typ)*, const int, int*, 
    @(typ)*, int*);
int ATL_@(pre)f77getrf
   (const enum ATLAS_ORDER, const int, const int, @(typ)*, const int, int*);
int ATL_@(pre)f77potrf(const enum ATLAS_UPLO, const int, @(typ)*, const int);
int ATL_@(pre)f77lauum(const enum ATLAS_UPLO, const int, @(typ)*, const int);
int ATL_@(pre)f77trtri(const enum ATLAS_UPLO, const enum ATLAS_DIAG, const int,
                  @(typ)*, const int);
int ATL_@(pre)f77posv(const enum ATLAS_UPLO, const int, const int, @(typ)*, const int, @(typ)*, const int);
int ATL_@(pre)f77gesv(const int, const int, @(typ)*, const int, int*, @(typ)*, const int);
int ATL_@(pre)f77gels(const enum ATLAS_TRANS, const int, const int, const int, @(typ)*, const int, @(typ)*, const int);
   @undef typ
   @undef styp
@endwhile
/*
 * =====================================================================
 * Prototypes for C-callable F77 interface to the Level 1 BLAS routines
 * =====================================================================
 */
void       ATL_sf77rotg
( float  *,        float  *,        float  *,        float  * );
void       ATL_df77rotg
( double *,        double *,        double *,        double * );
void       ATL_cf77rotg
( float  *,        const float  *,  float  *,        float  * );
void       ATL_zf77rotg
( double *,        const double *,  double *,        double * );
 
void       ATL_sf77rotmg
( float  *,        float  *,        float  *,        const float,
  float  * );
void       ATL_df77rotmg
( double *,        double *,        double *,        const double,
  double * );

float      ATL_sf77nrm2
( const int,       const float  *,  const int );
double     ATL_df77nrm2
( const int,       const double *,  const int );
float      ATL_scf77nrm2
( const int,       const float  *,  const int );
double     ATL_dzf77nrm2
( const int,       const double *,  const int );

float      ATL_sf77asum
( const int,       const float  *,  const int );
double     ATL_df77asum
( const int,       const double *,  const int );
float      ATL_scf77asum
( const int,       const float  *,  const int );
double     ATL_dzf77asum
( const int,       const double *,  const int );
 
int        ATL_isf77amax
( const int,       const float  *,  const int );
int        ATL_idf77amax
( const int,       const double *,  const int );
int        ATL_icf77amax
( const int,       const float  *,  const int );
int        ATL_izf77amax
( const int,       const double *,  const int );
 
void       ATL_sf77scal
( const int,       const float,     float  *,        const int );
void       ATL_df77scal
( const int,       const double,    double *,        const int );
void       ATL_cf77scal
( const int,       const float  *,  float  *,        const int );
void       ATL_zf77scal
( const int,       const double *,  double *,        const int );
void       ATL_csf77scal
( const int,       const float,     float  *,        const int );
void       ATL_zdf77scal
( const int,       const double,    double *,        const int );

void ATL_sf77set(const int, const float, float*, const int);
void ATL_df77set(const int, const double, double*, const int);
void ATL_cf77set(const int, const float*, float*, const int);
void ATL_zf77set(const int, const double*, double*, const int);
void ATL_sf77axpby
   (const int, const float, const float*, const int, const float,
    float*, const int);
void ATL_df77axpby
   (const int, const double, const double*, const int, const double,
    double*, const int);
void ATL_cf77axpby
   (const int, const float*, const float*, const int, const float*,
    float*, const int);
void ATL_zf77axpby
   (const int, const double*, const double*, const int, const double*,
    double*, const int);

void       ATL_sf77axpy
( const int,       const float,     const float  *,  const int,
  float  *,        const int );
void       ATL_df77axpy
( const int,       const double,    const double *,  const int,
  double *,        const int );
void       ATL_cf77axpy
( const int,       const float  *,  const float  *,  const int,
  float  *,        const int );
void       ATL_zf77axpy
( const int,       const double *,  const double *,  const int,
  double *,        const int );
 
void       ATL_sf77copy
( const int,       const float  *,  const int,       float  *,
  const int );  
void       ATL_df77copy
( const int,       const double *,  const int,       double *,
  const int );
void       ATL_cf77copy
( const int,       const float  *,  const int,       float  *,
  const int );
void       ATL_zf77copy
( const int,       const double *,  const int,       double *,
  const int );

void       ATL_sf77swap
( const int,       float  *,        const int,       float  *,
  const int );
void       ATL_df77swap
( const int,       double *,        const int,       double *,
  const int );
void       ATL_cf77swap
( const int,       float  *,        const int,       float  *,
  const int );
void       ATL_zf77swap
( const int,       double *,        const int,       double *,
  const int );
 
void       ATL_sf77rot
( const int,       float  *,        const int,       float  *,
  const int,       const float,     const float  );
void       ATL_df77rot
( const int,       double *,        const int,       double *,
  const int,       const double,    const double );
void       ATL_csf77rot
( const int,       float  *,        const int,       float  *,
  const int,       const float,     const float  );
void       ATL_zdf77rot
( const int,       double *,        const int,       double *,
  const int,       const double,    const double );

void       ATL_sf77rotm
( const int,       float  *,        const int,       float  *,
  const int,       const float  * );
void       ATL_df77rotm
( const int,       double *,        const int,       double *,
  const int,       const double * );
 
float      ATL_sf77dot
( const int,       const float  *,  const int,       const float  *,
  const int );
double     ATL_df77dot
( const int,       const double *,  const int,       const double *,
  const int );
void       ATL_cf77dotu_sub
( const int,       const float  *,  const int,       const float  *,
  const int,       float * );
void       ATL_cf77dotc_sub
( const int,       const float  *,  const int,       const float  *,
  const int,       float * );
void       ATL_zf77dotu_sub
( const int,       const double *,  const int,       const double *,
  const int,       double * );
void       ATL_zf77dotc_sub
( const int,       const double *,  const int,       const double *,
  const int,       double * );
 
float      ATL_sdsf77dot
( const int,       const float,     const float  *,  const int,
  const float  *,  const int );
double     ATL_dsf77dot
( const int,       const float  *,  const int,       const float  *,
  const int );
/*
 * =====================================================================
 * Prototypes for C-callable F77 interface to the Level 2 BLAS routines
 * =====================================================================
 */
void       ATL_sf77gemv
( const enum ATLAS_TRANS,           const int,       const int,
  const float,     const float  *,  const int,       const float  *,
  const int,       const float,     float  *,        const int );
void       ATL_df77gemv
( const enum ATLAS_TRANS,           const int,       const int,
  const double,    const double *,  const int,       const double *,
  const int,       const double,    double *,        const int );
void       ATL_cf77gemv
( const enum ATLAS_TRANS,           const int,       const int,
  const float  *,  const float  *,  const int,       const float  *,
  const int,       const float  *,  float  *,        const int );
void       ATL_zf77gemv
( const enum ATLAS_TRANS,           const int,       const int,
  const double *,  const double *,  const int,       const double *,
  const int,       const double *,  double *,        const int );

void       ATL_sf77gbmv
( const enum ATLAS_TRANS,           const int,       const int,
  const int,       const int,       const float,     const float  *,
  const int,       const float  *,  const int,       const float,
  float  *,        const int );
void       ATL_df77gbmv
( const enum ATLAS_TRANS,           const int,       const int,
  const int,       const int,       const double,    const double *,
  const int,       const double *,  const int,       const double,
  double *,        const int );
void       ATL_cf77gbmv
( const enum ATLAS_TRANS,           const int,       const int,
  const int,       const int,       const float  *,  const float  *,
  const int,       const float  *,  const int,       const float  *,
  float  *,        const int );
void       ATL_zf77gbmv
( const enum ATLAS_TRANS,           const int,       const int,
  const int,       const int,       const double *,  const double *,
  const int,       const double *,  const int,       const double *,
  double *,        const int );

void       ATL_sf77trmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const float  *,
  const int,       float  *,        const int );
void       ATL_df77trmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const double *,
  const int,       double *,        const int );
void       ATL_cf77trmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const float  *,
  const int,       float  *,        const int );
void       ATL_zf77trmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const double *,
  const int,       double *,        const int );

void       ATL_sf77tbmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const int,
  const float  *,  const int,       float  *,        const int );
void       ATL_df77tbmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const int,
  const double *,  const int,       double *,        const int );
void       ATL_cf77tbmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const int,
  const float  *,  const int,       float  *,        const int );
void       ATL_zf77tbmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const int,
  const double *,  const int,       double *,        const int );

void       ATL_sf77tpmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const float  *,
  float  *,        const int );
void       ATL_df77tpmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const double *,
  double *,        const int );
void       ATL_cf77tpmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const float  *,
  float  *,        const int );
void       ATL_zf77tpmv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const double *,
  double *,        const int );

void       ATL_sf77trsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const float  *,
  const int,       float  *,        const int );
void       ATL_df77trsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const double *,
  const int,       double *,        const int );
void       ATL_cf77trsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const float  *,
  const int,       float  *,        const int );
void       ATL_zf77trsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const double *,
  const int,       double *,        const int );

void       ATL_sf77tbsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const int,
  const float  *,  const int,       float  *,        const int );
void       ATL_df77tbsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const int,
  const double *,  const int,       double *,        const int );
void       ATL_cf77tbsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const int,
  const float  *,  const int,       float  *,        const int );
void       ATL_zf77tbsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const int,
  const double *,  const int,       double *,        const int );

void       ATL_sf77tpsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const float  *,
  float  *,        const int );
void       ATL_df77tpsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const double *,
  double *,        const int );
void       ATL_cf77tpsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const float  *,
  float  *,        const int );
void       ATL_zf77tpsv
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const enum ATLAS_DIAG,            const int,       const double *,
  double *,        const int );

void       ATL_sf77symv
( const enum ATLAS_UPLO,            const int,       const float,
  const float  *,  const int,       const float  *,  const int,
  const float,     float  *,        const int );
void       ATL_df77symv
( const enum ATLAS_UPLO,            const int,       const double,
  const double *,  const int,       const double *,  const int,
  const double,    double *,        const int );

void       ATL_cf77hemv
( const enum ATLAS_UPLO,            const int,       const float  *,
  const float  *,  const int,       const float  *,  const int,
  const float  *,  float  *,        const int );
void       ATL_zf77hemv
( const enum ATLAS_UPLO,            const int,       const double *,
  const double *,  const int,       const double *,  const int,
  const double *,  double *,        const int );

void       ATL_sf77sbmv
( const enum ATLAS_UPLO,            const int,       const int,
  const float,     const float  *,  const int,       const float  *,
  const int,       const float,     float  *,        const int );
void       ATL_df77sbmv
( const enum ATLAS_UPLO,            const int,       const int,
  const double,    const double *,  const int,       const double *,
  const int,       const double,    double *,        const int );
void       ATL_cf77hbmv
( const enum ATLAS_UPLO,            const int,       const int,
  const float  *,  const float  *,  const int,       const float  *,
  const int,       const float  *,  float  *,        const int );
void       ATL_zf77hbmv
( const enum ATLAS_UPLO,            const int,       const int,
  const double *,  const double *,  const int,       const double *,
  const int,       const double *,  double *,        const int );

void       ATL_sf77spmv
( const enum ATLAS_UPLO,            const int,       const float,
  const float  *,  const float  *,  const int,       const float,
  float  *,        const int );
void       ATL_df77spmv
( const enum ATLAS_UPLO,            const int,       const double,
  const double *,  const double *,  const int,       const double,
  double *,        const int );
void       ATL_cf77hpmv
( const enum ATLAS_UPLO,            const int,       const float  *,
  const float  *,  const float  *,  const int,       const float  *,
  float  *,        const int );
void       ATL_zf77hpmv
( const enum ATLAS_UPLO,            const int,       const double *,
  const double *,  const double *,  const int,       const double *,
  double *,        const int );

void       ATL_sf77ger
( const int,       const int,       const float,     const float  *,
  const int,       const float  *,  const int,       float  *,
  const int );
void       ATL_df77ger
( const int,       const int,       const double,    const double *,
  const int,       const double *,  const int,       double *,
  const int );
void       ATL_cf77gerc
( const int,       const int,       const float  *,  const float  *,
  const int,       const float  *,  const int,       float  *,
  const int );
void       ATL_cf77geru
( const int,       const int,       const float  *,  const float  *,
  const int,       const float  *,  const int,       float  *,
  const int );
void       ATL_zf77gerc
( const int,       const int,       const double *,  const double *,
  const int,       const double *,  const int,       double *,
  const int );
void       ATL_zf77geru
( const int,       const int,       const double *,  const double *,
  const int,       const double *,  const int,       double *,
  const int );

void       ATL_sf77syr
( const enum ATLAS_UPLO,            const int,       const float,
  const float  *,  const int,       float  *,        const int );
void       ATL_df77syr
( const enum ATLAS_UPLO,            const int,       const double,
  const double *,  const int,       double *,        const int );
void       ATL_cf77her
( const enum ATLAS_UPLO,            const int,       const float,
  const float  *,  const int,       float  *,        const int );
void       ATL_zf77her
( const enum ATLAS_UPLO,            const int,       const double,
  const double *,  const int,       double *,        const int );

void       ATL_sf77spr
( const enum ATLAS_UPLO,            const int,       const float,
  const float  *,  const int,       float  * );
void       ATL_df77spr
( const enum ATLAS_UPLO,            const int,       const double,
  const double *,  const int,       double * );
void       ATL_cf77hpr
( const enum ATLAS_UPLO,            const int,       const float,
  const float  *,  const int,       float  * );
void       ATL_zf77hpr
( const enum ATLAS_UPLO,            const int,       const double,
  const double *,  const int,       double * );

void       ATL_sf77syr2
( const enum ATLAS_UPLO,            const int,       const float,
  const float  *,  const int,       const float  *,  const int,
  float  *,        const int );
void       ATL_df77syr2
( const enum ATLAS_UPLO,            const int,       const double,
  const double *,  const int,       const double *,  const int,
  double *,        const int );
void       ATL_cf77her2
( const enum ATLAS_UPLO,            const int,       const float  *,
  const float  *,  const int,       const float  *,  const int,
  float  *,        const int );
void       ATL_zf77her2
( const enum ATLAS_UPLO,            const int,       const double *,
  const double *,  const int,       const double *,  const int,
  double *,        const int );

void       ATL_sf77spr2
( const enum ATLAS_UPLO,            const int,       const float,
  const float  *,  const int,       const float  *,  const int,
  float  * );
void       ATL_df77spr2
( const enum ATLAS_UPLO,            const int,       const double,
  const double *,  const int,       const double *,  const int,
  double * );
void       ATL_cf77hpr2
( const enum ATLAS_UPLO,            const int,       const float  *,
  const float  *,  const int,       const float  *,  const int,
  float  * );
void       ATL_zf77hpr2
( const enum ATLAS_UPLO,            const int,       const double *,
  const double *,  const int,       const double *,  const int,
  double * );
/*
 * =====================================================================
 * Prototypes for C-callable F77 interface to the Level 3 BLAS routines
 * =====================================================================
 */
void       ATL_sf77gemm
( const enum ATLAS_TRANS,           const enum ATLAS_TRANS,
  const int,       const int,       const int,       const float,
  const float  *,  const int,       const float  *,  const int,
  const float,     float  *,        const int );
void       ATL_df77gemm
( const enum ATLAS_TRANS,           const enum ATLAS_TRANS,
  const int,       const int,       const int,       const double,
  const double *,  const int,       const double *,  const int,
  const double,    double *,        const int );
void       ATL_cf77gemm
( const enum ATLAS_TRANS,           const enum ATLAS_TRANS,
  const int,       const int,       const int,       const float  *,
  const float  *,  const int,       const float  *,  const int,
  const float  *,  float  *,        const int );
void       ATL_zf77gemm
( const enum ATLAS_TRANS,           const enum ATLAS_TRANS,
  const int,       const int,       const int,       const double *,
  const double *,  const int,       const double *,  const int,
  const double *,  double *,        const int );

void       ATL_cf77hemm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const int,       const int,       const float  *,  const float  *,
  const int,       const float  *,  const int,       const float  *,
  float  *,        const int );
void       ATL_zf77hemm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const int,       const int,       const double *,  const double *,
  const int,       const double *,  const int,       const double *,
  double *,        const int );

void       ATL_cf77herk
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const float,     const float  *,
  const int,       const float,     float  *,        const int );
void       ATL_zf77herk
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const double,    const double *,
  const int,       const double,    double *,        const int );

void       ATL_cf77her2k
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const float  *,  const float  *,
  const int,       const float  *,  const int,       const float,
  float  *,        const int );
void       ATL_zf77her2k
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const double *,  const double *,
  const int,       const double *,  const int,       const double,
  double *,        const int );

void       ATL_sf77symm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const int,       const int,       const float,     const float  *,
  const int,       const float  *,  const int,       const float,
  float  *,        const int );
void       ATL_df77symm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const int,       const int,       const double,    const double *,
  const int,       const double *,  const int,       const double,
  double *,        const int );
void       ATL_cf77symm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const int,       const int,       const float  *,  const float  *,
  const int,       const float  *,  const int,       const float  *,
  float  *,        const int );
void       ATL_zf77symm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const int,       const int,       const double *,  const double *,
  const int,       const double *,  const int,       const double *,
  double *,        const int );

void       ATL_sf77syrk
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const float,     const float  *,
  const int,       const float,     float  *,        const int );
void       ATL_df77syrk
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const double,    const double *,
  const int,       const double,    double *,        const int );
void       ATL_cf77syrk
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const float  *,  const float  *,
  const int,       const float  *,  float  *,        const int );
void       ATL_zf77syrk
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const double *,  const double *,
  const int,       const double *,  double *,        const int );

void       ATL_sf77syr2k
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const float,     const float  *,
  const int,       const float  *,  const int,       const float,
  float  *,        const int );
void       ATL_df77syr2k
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const double,    const double *,
  const int,       const double *,  const int,       const double,
  double *,        const int );
void       ATL_cf77syr2k
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const float  *,  const float  *,
  const int,       const float  *,  const int,       const float  *,
  float  *,        const int );
void       ATL_zf77syr2k
( const enum ATLAS_UPLO,            const enum ATLAS_TRANS,
  const int,       const int,       const double *,  const double *,
  const int,       const double *,  const int,       const double *,
  double *,        const int );

void       ATL_sf77trmm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const enum ATLAS_TRANS,           const enum ATLAS_DIAG,
  const int,       const int,       const float,     const float  *,
  const int,       float  *,        const int );
void       ATL_df77trmm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const enum ATLAS_TRANS,           const enum ATLAS_DIAG,
  const int,       const int,       const double,    const double *,
  const int,       double *,        const int );
void       ATL_cf77trmm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const enum ATLAS_TRANS,           const enum ATLAS_DIAG,
  const int,       const int,       const float  *,  const float  *,
  const int,       float  *,        const int );
void       ATL_zf77trmm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const enum ATLAS_TRANS,           const enum ATLAS_DIAG,
  const int,       const int,       const double *,  const double *,
  const int,       double *,        const int );

void       ATL_sf77trsm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const enum ATLAS_TRANS,           const enum ATLAS_DIAG,
  const int,       const int,       const float,     const float  *,
  const int,       float  *,        const int );
void       ATL_df77trsm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const enum ATLAS_TRANS,           const enum ATLAS_DIAG,
  const int,       const int,       const double,    const double *,
  const int,       double *,        const int );
void       ATL_cf77trsm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const enum ATLAS_TRANS,           const enum ATLAS_DIAG,
  const int,       const int,       const float  *,  const float  *,
  const int,       float  *,        const int );
void       ATL_zf77trsm
( const enum ATLAS_SIDE,            const enum ATLAS_UPLO,
  const enum ATLAS_TRANS,           const enum ATLAS_DIAG,
  const int,       const int,       const double *,  const double *,
  const int,       double *,        const int );

#endif
@ROUT atlas_f77blas.h
#ifndef ATLAS_F77_LVLS
#define ATLAS_F77_LVLS

#include "atlas_f77.h"

#if   defined( StringSunStyle  )
#define F77_CHAR_DECL          F77_CHAR          /* input character*1 */
#define F77_1_CHAR             , F77_INTEGER
#define F77_2_CHAR             F77_1_CHAR F77_1_CHAR
#define F77_3_CHAR             F77_2_CHAR F77_1_CHAR
#define F77_4_CHAR             F77_3_CHAR F77_1_CHAR
#elif defined( StringCrayStyle )
#define F77_CHAR_DECL          F77_CHAR          /* input character*1 */
#elif defined( StringStructVal )
#define F77_CHAR_DECL          F77_CHAR          /* input character*1 */
#elif defined( StringStructPtr )
#define F77_CHAR_DECL          F77_CHAR *        /* input character*1 */
#endif

#ifndef F77_1_CHAR
#define F77_1_CHAR
#define F77_2_CHAR
#define F77_3_CHAR
#define F77_4_CHAR
#endif

#ifndef F77_CHAR_DECL
   #define F77_CHAR_DECL          F77_CHAR *        /* input character*1 */
#endif

#define F77_INT_DECL           const F77_INTEGER *   /* input integer */

#ifdef TREAL
#define F77_SIN_DECL           const TYPE *           /* input scalar */
#define F77_SINOUT_DECL        TYPE *          /* input/output scalar */
#define F77_RIN_DECL           const TYPE *      /* input real scalar */
#define F77_RINOUT_DECL        TYPE *     /* input/output real scalar */
#else
#define F77_SIN_DECL           const TYPE *           /* input scalar */
#define F77_SINOUT_DECL        TYPE *          /* input/output scalar */
#define F77_RIN_DECL           const TYPE *      /* input real scalar */
#define F77_RINOUT_DECL        TYPE *     /* input/output real scalar */
#endif

#define F77_VIN_DECL           const TYPE *           /* input vector */
#define F77_VINOUT_DECL        TYPE *          /* input/output matrix */

#define F77_MIN_DECL           const TYPE *           /* input matrix */
#define F77_MINOUT_DECL        TYPE *          /* input/output matrix */

#if   defined( CRAY )
#define F77_VOID_FUN           extern fortran void      /* subroutine */
#define F77_INT_FUN            extern fortran int /* integer function */
#define F77_TYPE_FUN           extern fortran TYPE   /* real function */
#define F77_DBLE_FUN           extern fortran double /* dble function */
#else
#define F77_VOID_FUN           extern void              /* subroutine */
#define F77_INT_FUN            extern int         /* integer function */
#define F77_TYPE_FUN           extern TYPE           /* real function */
#define F77_DBLE_FUN           extern double         /* dble function */
#endif

#if   defined( NoChange )
/*
 * These defines  set  up  the  naming scheme required to have a FORTRAN
 * routine called by a C routine with the following  FORTRAN to C inter-
 * face:
 *
 *          FORTRAN DECLARATION            C CALL
 *          SUBROUTINE DGEMM(...)          dgemm(...)
 */
#if   defined( SREAL )

#define    F77rotg             srotg
#define    F77rotmg            srotmg
#define    F77nrm2             swrapnrm2
#define    F77asum             swrapasum
#define    F77amax             isamax
#define    F77scal             sscal
#define    F77axpy             saxpy
#define    F77axpby            fatlas_saxpby
#define    F77set              fatlas_sset   
#define    F77copy             scopy
#define    F77swap             sswap
#define    F77rot              srot
#define    F77rotm             srotm
#define    F77dot              swrapdot
#define    F77dsdot            dswrapdot
#define    F77sdsdot           sdswrapdot

#define    F77gemv             sgemv
#define    F77gbmv             sgbmv
#define    F77sbmv             ssbmv
#define    F77spmv             sspmv
#define    F77symv             ssymv
#define    F77tbmv             stbmv
#define    F77tpmv             stpmv
#define    F77trmv             strmv
#define    F77tbsv             stbsv
#define    F77tpsv             stpsv
#define    F77trsv             strsv
#define    F77ger              sger
#define    F77spr              sspr
#define    F77syr              ssyr
#define    F77spr2             sspr2
#define    F77syr2             ssyr2

#define    F77gemm             sgemm
#define    F77symm             ssymm
#define    F77syrk             ssyrk
#define    F77syr2k            ssyr2k
#define    F77trmm             strmm
#define    F77trsm             strsm

#elif defined( DREAL )

#define    F77rotg             drotg
#define    F77rotmg            drotmg
#define    F77nrm2             dwrapnrm2
#define    F77asum             dwrapasum
#define    F77amax             idamax
#define    F77scal             dscal
#define    F77axpy             daxpy
#define    F77axpby            fatlas_daxpby
#define    F77set              fatlas_dset   
#define    F77copy             dcopy
#define    F77swap             dswap
#define    F77rot              drot
#define    F77rotm             drotm
#define    F77dot              dwrapdot

#define    F77gemv             dgemv
#define    F77gbmv             dgbmv
#define    F77sbmv             dsbmv
#define    F77spmv             dspmv
#define    F77symv             dsymv
#define    F77tbmv             dtbmv
#define    F77tpmv             dtpmv
#define    F77trmv             dtrmv
#define    F77tbsv             dtbsv
#define    F77tpsv             dtpsv
#define    F77trsv             dtrsv
#define    F77ger              dger
#define    F77spr              dspr
#define    F77syr              dsyr
#define    F77spr2             dspr2
#define    F77syr2             dsyr2

#define    F77gemm             dgemm
#define    F77symm             dsymm
#define    F77syrk             dsyrk
#define    F77syr2k            dsyr2k
#define    F77trmm             dtrmm
#define    F77trsm             dtrsm

#elif defined( SCPLX )

#define    F77rotg             crotg
#define    F77nrm2             scwrapnrm2
#define    F77asum             scwrapasum
#define    F77amax             icamax
#define    F77scal             cscal
#define    F77rscal            csscal
#define    F77axpy             caxpy
#define    F77axpby            fatlas_caxpby
#define    F77set              fatlas_cset   
#define    F77copy             ccopy
#define    F77swap             cswap
#define    F77rot              csrot
#define    F77dotc             cwrapdotc
#define    F77dotu             cwrapdotu

#define    F77gbmv             cgbmv
#define    F77gemv             cgemv
#define    F77hbmv             chbmv
#define    F77hpmv             chpmv
#define    F77hemv             chemv
#define    F77tbmv             ctbmv
#define    F77tpmv             ctpmv
#define    F77trmv             ctrmv
#define    F77tbsv             ctbsv
#define    F77tpsv             ctpsv
#define    F77trsv             ctrsv
#define    F77gerc             cgerc
#define    F77geru             cgeru
#define    F77hpr              chpr
#define    F77her              cher
#define    F77hpr2             chpr2
#define    F77her2             cher2

#define    F77gemm             cgemm
#define    F77hemm             chemm
#define    F77herk             cherk
#define    F77her2k            cher2k
#define    F77symm             csymm
#define    F77syrk             csyrk
#define    F77syr2k            csyr2k
#define    F77trmm             ctrmm
#define    F77trsm             ctrsm

#elif defined( DCPLX )

#define    F77rotg             zrotg
#define    F77nrm2             dzwrapnrm2
#define    F77asum             dzwrapasum
#define    F77amax             izamax
#define    F77scal             zscal
#define    F77rscal            zdscal
#define    F77axpy             zaxpy
#define    F77axpby            fatlas_zaxpby
#define    F77set              fatlas_zset   
#define    F77copy             zcopy
#define    F77swap             zswap
#define    F77rot              zdrot
#define    F77dotc             zwrapdotc
#define    F77dotu             zwrapdotu

#define    F77gbmv             zgbmv
#define    F77gemv             zgemv
#define    F77hbmv             zhbmv
#define    F77hpmv             zhpmv
#define    F77hemv             zhemv
#define    F77tbmv             ztbmv
#define    F77tpmv             ztpmv
#define    F77trmv             ztrmv
#define    F77tbsv             ztbsv
#define    F77tpsv             ztpsv
#define    F77trsv             ztrsv
#define    F77gerc             zgerc
#define    F77geru             zgeru
#define    F77hpr              zhpr
#define    F77her              zher
#define    F77hpr2             zhpr2
#define    F77her2             zher2

#define    F77gemm             zgemm
#define    F77hemm             zhemm
#define    F77herk             zherk
#define    F77her2k            zher2k
#define    F77symm             zsymm
#define    F77syrk             zsyrk
#define    F77syr2k            zsyr2k
#define    F77trmm             ztrmm
#define    F77trsm             ztrsm

#endif

#elif defined( UpCase   )
/*
 * These defines  set  up  the  naming scheme required to have a FORTRAN
 * routine called by a C routine with the following  FORTRAN to C inter-
 * face:
 *
 *          FORTRAN DECLARATION            C CALL
 *          SUBROUTINE DGEMM(...)          DGEMM(...)
 */
#if   defined( SREAL )

#define    F77rotg             SROTG
#define    F77rotmg            SROTMG
#define    F77nrm2             SWRAPNRM2
#define    F77asum             SWRAPASUM
#define    F77amax             ISAMAX
#define    F77scal             SSCAL
#define    F77axpy             SAXPY
#define    F77axpby            FATLAS_SAXPBY
#define    F77set              FATLAS_SSET   
#define    F77copy             SCOPY
#define    F77swap             SSWAP
#define    F77rot              SROT
#define    F77rotm             SROTM
#define    F77dot              SWRAPDOT
#define    F77dsdot            DSWRAPDOT
#define    F77sdsdot           SDSWRAPDOT

#define    F77gemv             SGEMV
#define    F77gbmv             SGBMV
#define    F77sbmv             SSBMV
#define    F77spmv             SSPMV
#define    F77symv             SSYMV
#define    F77tbmv             STBMV
#define    F77tpmv             STPMV
#define    F77trmv             STRMV
#define    F77tbsv             STBSV
#define    F77tpsv             STPSV
#define    F77trsv             STRSV
#define    F77ger              SGER
#define    F77spr              SSPR
#define    F77syr              SSYR
#define    F77spr2             SSPR2
#define    F77syr2             SSYR2

#define    F77gemm             SGEMM
#define    F77symm             SSYMM
#define    F77syrk             SSYRK
#define    F77syr2k            SSYR2K
#define    F77trmm             STRMM
#define    F77trsm             STRSM

#elif defined( DREAL )

#define    F77rotg             DROTG
#define    F77rotmg            DROTMG
#define    F77nrm2             DWRAPNRM2
#define    F77asum             DWRAPASUM
#define    F77amax             IDAMAX
#define    F77scal             DSCAL
#define    F77axpy             DAXPY
#define    F77axpby            FATLAS_DAXPBY
#define    F77set              FATLAS_DSET   
#define    F77copy             DCOPY
#define    F77swap             DSWAP
#define    F77rot              DROT
#define    F77rotm             DROTM
#define    F77dot              DWRAPDOT

#define    F77gemv             DGEMV
#define    F77gbmv             DGBMV
#define    F77sbmv             DSBMV
#define    F77spmv             DSPMV
#define    F77symv             DSYMV
#define    F77tbmv             DTBMV
#define    F77tpmv             DTPMV
#define    F77trmv             DTRMV
#define    F77tbsv             DTBSV
#define    F77tpsv             DTPSV
#define    F77trsv             DTRSV
#define    F77ger              DGER
#define    F77spr              DSPR
#define    F77syr              DSYR
#define    F77spr2             DSPR2
#define    F77syr2             DSYR2

#define    F77gemm             DGEMM
#define    F77symm             DSYMM
#define    F77syrk             DSYRK
#define    F77syr2k            DSYR2K
#define    F77trmm             DTRMM
#define    F77trsm             DTRSM

#elif defined( SCPLX )

#define    F77rotg             CROTG
#define    F77nrm2             SCWRAPNRM2
#define    F77asum             SCWRAPASUM
#define    F77amax             ICAMAX
#define    F77scal             CSCAL
#define    F77rscal            CSSCAL
#define    F77axpy             CAXPY
#define    F77axpby            FATLAS_CAXPBY
#define    F77set              FATLAS_CSET   
#define    F77copy             CCOPY
#define    F77swap             CSWAP
#define    F77rot              CSROT
#define    F77dotc             CWRAPDOTC
#define    F77dotu             CWRAPDOTU

#define    F77gbmv             CGBMV
#define    F77gemv             CGEMV
#define    F77hbmv             CHBMV
#define    F77hpmv             CHPMV
#define    F77hemv             CHEMV
#define    F77tbmv             CTBMV
#define    F77tpmv             CTPMV
#define    F77trmv             CTRMV
#define    F77tbsv             CTBSV
#define    F77tpsv             CTPSV
#define    F77trsv             CTRSV
#define    F77gerc             CGERC
#define    F77geru             CGERU
#define    F77hpr              CHPR
#define    F77her              CHER
#define    F77hpr2             CHPR2
#define    F77her2             CHER2

#define    F77gemm             CGEMM
#define    F77hemm             CHEMM
#define    F77herk             CHERK
#define    F77her2k            CHER2K
#define    F77symm             CSYMM
#define    F77syrk             CSYRK
#define    F77syr2k            CSYR2K
#define    F77trmm             CTRMM
#define    F77trsm             CTRSM

#elif defined( DCPLX )

#define    F77rotg             ZROTG
#define    F77nrm2             DZWRAPNRM2
#define    F77asum             DZWRAPASUM
#define    F77amax             IZAMAX
#define    F77scal             ZSCAL
#define    F77rscal            ZDSCAL
#define    F77axpy             ZAXPY
#define    F77axpby            FATLAS_ZAXPBY
#define    F77set              FATLAS_ZSET   
#define    F77copy             ZCOPY
#define    F77swap             ZSWAP
#define    F77rot              ZDROT
#define    F77dotc             ZWRAPDOTC
#define    F77dotu             ZWRAPDOTU

#define    F77gbmv             ZGBMV
#define    F77gemv             ZGEMV
#define    F77hbmv             ZHBMV
#define    F77hpmv             ZHPMV
#define    F77hemv             ZHEMV
#define    F77tbmv             ZTBMV
#define    F77tpmv             ZTPMV
#define    F77trmv             ZTRMV
#define    F77tbsv             ZTBSV
#define    F77tpsv             ZTPSV
#define    F77trsv             ZTRSV
#define    F77gerc             ZGERC
#define    F77geru             ZGERU
#define    F77hpr              ZHPR
#define    F77her              ZHER
#define    F77hpr2             ZHPR2
#define    F77her2             ZHER2

#define    F77gemm             ZGEMM
#define    F77hemm             ZHEMM
#define    F77herk             ZHERK
#define    F77her2k            ZHER2K
#define    F77symm             ZSYMM
#define    F77syrk             ZSYRK
#define    F77syr2k            ZSYR2K
#define    F77trmm             ZTRMM
#define    F77trsm             ZTRSM

#endif

#elif defined( Add_     ) || defined( Add__    )
/*
 * These defines  set  up  the  naming scheme required to have a FORTRAN
 * routine called by a C routine  with the following  FORTRAN to C inter-
 * face:
 *
 *          FORTRAN DECLARATION            C CALL
 *          SUBROUTINE DGEMM(...)          dgemm_(...)
 */
#if   defined( SREAL )

#define    F77rotg             srotg_
#define    F77rotmg            srotmg_
#define    F77nrm2             swrapnrm2_
#define    F77asum             swrapasum_
#define    F77amax             isamax_
#define    F77scal             sscal_
#define    F77axpy             saxpy_
#ifdef Add_
   #define    F77axpby            fatlas_saxpby_
   #define    F77set              fatlas_sset_
#else
   #define    F77axpby            fatlas_saxpby__
   #define    F77set              fatlas_sset__
#endif
#define    F77copy             scopy_
#define    F77swap             sswap_
#define    F77rot              srot_
#define    F77rotm             srotm_
#define    F77dot              swrapdot_
#define    F77dsdot            dswrapdot_
#define    F77sdsdot           sdswrapdot_

#define    F77gemv             sgemv_
#define    F77gbmv             sgbmv_
#define    F77sbmv             ssbmv_
#define    F77spmv             sspmv_
#define    F77symv             ssymv_
#define    F77tbmv             stbmv_
#define    F77tpmv             stpmv_
#define    F77trmv             strmv_
#define    F77tbsv             stbsv_
#define    F77tpsv             stpsv_
#define    F77trsv             strsv_
#define    F77ger              sger_
#define    F77spr              sspr_
#define    F77syr              ssyr_
#define    F77spr2             sspr2_
#define    F77syr2             ssyr2_

#define    F77gemm             sgemm_
#define    F77symm             ssymm_
#define    F77syrk             ssyrk_
#define    F77syr2k            ssyr2k_
#define    F77trmm             strmm_
#define    F77trsm             strsm_

#elif defined( DREAL )

#define    F77rotg             drotg_
#define    F77rotmg            drotmg_
#define    F77nrm2             dwrapnrm2_
#define    F77asum             dwrapasum_
#define    F77amax             idamax_
#define    F77scal             dscal_
#define    F77axpy             daxpy_
#ifdef Add_
   #define    F77axpby            fatlas_daxpby_
   #define    F77set              fatlas_dset_
#else
   #define    F77axpby            fatlas_daxpby__
   #define    F77set              fatlas_dset__
#endif
#define    F77copy             dcopy_
#define    F77swap             dswap_
#define    F77rot              drot_
#define    F77rotm             drotm_
#define    F77dot              dwrapdot_

#define    F77gemv             dgemv_
#define    F77gbmv             dgbmv_
#define    F77sbmv             dsbmv_
#define    F77spmv             dspmv_
#define    F77symv             dsymv_
#define    F77tbmv             dtbmv_
#define    F77tpmv             dtpmv_
#define    F77trmv             dtrmv_
#define    F77tbsv             dtbsv_
#define    F77tpsv             dtpsv_
#define    F77trsv             dtrsv_
#define    F77ger              dger_
#define    F77spr              dspr_
#define    F77syr              dsyr_
#define    F77spr2             dspr2_
#define    F77syr2             dsyr2_

#define    F77gemm             dgemm_
#define    F77symm             dsymm_
#define    F77syrk             dsyrk_
#define    F77syr2k            dsyr2k_
#define    F77trmm             dtrmm_
#define    F77trsm             dtrsm_

#elif defined( SCPLX )

#define    F77rotg             crotg_
#define    F77nrm2             scwrapnrm2_
#define    F77asum             scwrapasum_
#define    F77amax             icamax_
#define    F77scal             cscal_
#define    F77rscal            csscal_
#define    F77axpy             caxpy_
#ifdef Add_
   #define    F77axpby            fatlas_caxpby_
   #define    F77set              fatlas_cset_
#else
   #define    F77axpby            fatlas_caxpby__
   #define    F77set              fatlas_cset__
#endif
#define    F77copy             ccopy_
#define    F77swap             cswap_
#define    F77rot              csrot_
#define    F77dotc             cwrapdotc_
#define    F77dotu             cwrapdotu_

#define    F77gbmv             cgbmv_
#define    F77gemv             cgemv_
#define    F77hbmv             chbmv_
#define    F77hpmv             chpmv_
#define    F77hemv             chemv_
#define    F77tbmv             ctbmv_
#define    F77tpmv             ctpmv_
#define    F77trmv             ctrmv_
#define    F77tbsv             ctbsv_
#define    F77tpsv             ctpsv_
#define    F77trsv             ctrsv_
#define    F77gerc             cgerc_
#define    F77geru             cgeru_
#define    F77hpr              chpr_
#define    F77her              cher_
#define    F77hpr2             chpr2_
#define    F77her2             cher2_

#define    F77gemm             cgemm_
#define    F77hemm             chemm_
#define    F77herk             cherk_
#define    F77her2k            cher2k_
#define    F77symm             csymm_
#define    F77syrk             csyrk_
#define    F77syr2k            csyr2k_
#define    F77trmm             ctrmm_
#define    F77trsm             ctrsm_

#elif defined( DCPLX )

#define    F77rotg             zrotg_
#define    F77nrm2             dzwrapnrm2_
#define    F77asum             dzwrapasum_
#define    F77amax             izamax_
#define    F77scal             zscal_
#define    F77rscal            zdscal_
#define    F77axpy             zaxpy_
#ifdef Add_
   #define    F77axpby            fatlas_zaxpby_
   #define    F77set              fatlas_zset_
#else
   #define    F77axpby            fatlas_zaxpby__
   #define    F77set              fatlas_zset__
#endif
#define    F77copy             zcopy_
#define    F77swap             zswap_
#define    F77rot              zdrot_
#define    F77dotc             zwrapdotc_
#define    F77dotu             zwrapdotu_

#define    F77gbmv             zgbmv_
#define    F77gemv             zgemv_
#define    F77hbmv             zhbmv_
#define    F77hpmv             zhpmv_
#define    F77hemv             zhemv_
#define    F77tbmv             ztbmv_
#define    F77tpmv             ztpmv_
#define    F77trmv             ztrmv_
#define    F77tbsv             ztbsv_
#define    F77tpsv             ztpsv_
#define    F77trsv             ztrsv_
#define    F77gerc             zgerc_
#define    F77geru             zgeru_
#define    F77hpr              zhpr_
#define    F77her              zher_
#define    F77hpr2             zhpr2_
#define    F77her2             zher2_

#define    F77gemm             zgemm_
#define    F77hemm             zhemm_
#define    F77herk             zherk_
#define    F77her2k            zher2k_
#define    F77symm             zsymm_
#define    F77syrk             zsyrk_
#define    F77syr2k            zsyr2k_
#define    F77trmm             ztrmm_
#define    F77trsm             ztrsm_

#endif

#endif

#ifdef TREAL
F77_VOID_FUN    F77rotg
( F77_SINOUT_DECL, F77_SINOUT_DECL, F77_SINOUT_DECL, F77_SINOUT_DECL );
F77_VOID_FUN    F77rotmg
( F77_SINOUT_DECL, F77_SINOUT_DECL, F77_SINOUT_DECL, F77_SIN_DECL,
  F77_VINOUT_DECL );
#else
F77_VOID_FUN    F77rotg
( F77_SINOUT_DECL, F77_SIN_DECL,    F77_SINOUT_DECL, F77_SINOUT_DECL );
#endif
F77_VOID_FUN    F77nrm2
( F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_RINOUT_DECL );
F77_VOID_FUN    F77asum
( F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_RINOUT_DECL );
F77_INT_FUN     F77amax
( F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL );
F77_VOID_FUN    F77scal
( F77_INT_DECL,    F77_SIN_DECL,    F77_VINOUT_DECL, F77_INT_DECL );
#ifdef TCPLX
F77_VOID_FUN    F77rscal
( F77_INT_DECL,    F77_RIN_DECL,    F77_VINOUT_DECL, F77_INT_DECL );
#endif
void F77set
( F77_INT_DECL,    F77_SIN_DECL,    F77_VINOUT_DECL, F77_INT_DECL );
void F77axpby
( F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,    F77_INT_DECL,
  F77_SIN_DECL, F77_VINOUT_DECL, F77_INT_DECL );
F77_VOID_FUN    F77axpy
( F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,    F77_INT_DECL,
  F77_VINOUT_DECL, F77_INT_DECL );
F77_VOID_FUN    F77copy
( F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL );
F77_VOID_FUN    F77swap
( F77_INT_DECL,    F77_VINOUT_DECL, F77_INT_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL );
F77_VOID_FUN    F77rot
( F77_INT_DECL,    F77_VINOUT_DECL, F77_INT_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL,    F77_SIN_DECL,    F77_SIN_DECL );
#ifdef TREAL
F77_VOID_FUN    F77rotm
( F77_INT_DECL,    F77_VINOUT_DECL, F77_INT_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL,    F77_VIN_DECL );
#endif
#ifdef TREAL
F77_VOID_FUN    F77dot
( F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_SINOUT_DECL );
#ifdef SREAL
F77_VOID_FUN    F77dsdot
( F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    double * );
F77_VOID_FUN    F77sdsdot
( F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,    F77_INT_DECL,
  F77_VIN_DECL,    F77_INT_DECL,    F77_SINOUT_DECL );
#endif
#else
F77_VOID_FUN    F77dotc
( F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_SINOUT_DECL );
F77_VOID_FUN    F77dotu
( F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_SINOUT_DECL );
#endif

F77_VOID_FUN    F77gbmv
( F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,    F77_INT_DECL,
  F77_INT_DECL,    F77_SIN_DECL,    F77_MIN_DECL,    F77_INT_DECL,
  F77_VIN_DECL,    F77_INT_DECL,    F77_SIN_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL     F77_1_CHAR );
F77_VOID_FUN    F77gemv
( F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,
                   F77_SIN_DECL,    F77_MIN_DECL,    F77_INT_DECL,
  F77_VIN_DECL,    F77_INT_DECL,    F77_SIN_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL     F77_1_CHAR );
#ifdef TREAL
F77_VOID_FUN    F77ger
( F77_INT_DECL,    F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_MINOUT_DECL,
  F77_INT_DECL );
F77_VOID_FUN    F77sbmv
( F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,    F77_SIN_DECL,
  F77_MIN_DECL,    F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_VINOUT_DECL, F77_INT_DECL     F77_1_CHAR ); 
F77_VOID_FUN    F77spmv
( F77_CHAR_DECL,   F77_INT_DECL,                     F77_SIN_DECL,
  F77_MIN_DECL,                     F77_VIN_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_VINOUT_DECL, F77_INT_DECL     F77_1_CHAR ); 
F77_VOID_FUN    F77symv
( F77_CHAR_DECL,   F77_INT_DECL,                     F77_SIN_DECL,
  F77_MIN_DECL,    F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_VINOUT_DECL, F77_INT_DECL     F77_1_CHAR ); 
F77_VOID_FUN    F77spr
( F77_CHAR_DECL,   F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_MINOUT_DECL                   F77_1_CHAR );
F77_VOID_FUN    F77syr
( F77_CHAR_DECL,   F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_MINOUT_DECL, F77_INT_DECL     F77_1_CHAR );
F77_VOID_FUN    F77spr2
( F77_CHAR_DECL,   F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_MINOUT_DECL
                   F77_1_CHAR );
F77_VOID_FUN    F77syr2
( F77_CHAR_DECL,   F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_MINOUT_DECL,
  F77_INT_DECL     F77_1_CHAR );
#else
F77_VOID_FUN    F77gerc
( F77_INT_DECL,    F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_MINOUT_DECL,
  F77_INT_DECL );
F77_VOID_FUN    F77geru
( F77_INT_DECL,    F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_MINOUT_DECL,
  F77_INT_DECL );
F77_VOID_FUN    F77hbmv
( F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,    F77_SIN_DECL,
  F77_MIN_DECL,    F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_VINOUT_DECL, F77_INT_DECL     F77_1_CHAR ); 
F77_VOID_FUN    F77hpmv
( F77_CHAR_DECL,   F77_INT_DECL,                     F77_SIN_DECL,
  F77_MIN_DECL,                     F77_VIN_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_VINOUT_DECL, F77_INT_DECL     F77_1_CHAR ); 
F77_VOID_FUN    F77hemv
( F77_CHAR_DECL,   F77_INT_DECL,                     F77_SIN_DECL,
  F77_MIN_DECL,    F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_VINOUT_DECL, F77_INT_DECL     F77_1_CHAR ); 
F77_VOID_FUN    F77hpr
( F77_CHAR_DECL,   F77_INT_DECL,    F77_RIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_MINOUT_DECL                   F77_1_CHAR );
F77_VOID_FUN    F77her
( F77_CHAR_DECL,   F77_INT_DECL,    F77_RIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_MINOUT_DECL, F77_INT_DECL     F77_1_CHAR );
F77_VOID_FUN    F77hpr2
( F77_CHAR_DECL,   F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_MINOUT_DECL
                   F77_1_CHAR );
F77_VOID_FUN    F77her2
( F77_CHAR_DECL,   F77_INT_DECL,    F77_SIN_DECL,    F77_VIN_DECL,
  F77_INT_DECL,    F77_VIN_DECL,    F77_INT_DECL,    F77_MINOUT_DECL,
  F77_INT_DECL     F77_1_CHAR );
#endif
F77_VOID_FUN    F77tbmv
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,
  F77_INT_DECL,    F77_MIN_DECL,    F77_INT_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL     F77_3_CHAR ); 
F77_VOID_FUN    F77tpmv
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,
                   F77_MIN_DECL,                     F77_VINOUT_DECL,
  F77_INT_DECL     F77_3_CHAR ); 
F77_VOID_FUN    F77trmv
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,
                   F77_MIN_DECL,    F77_INT_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL     F77_3_CHAR ); 
F77_VOID_FUN    F77tbsv
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,
  F77_INT_DECL,    F77_MIN_DECL,    F77_INT_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL     F77_3_CHAR ); 
F77_VOID_FUN    F77tpsv
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,
                   F77_MIN_DECL,                     F77_VINOUT_DECL,
  F77_INT_DECL     F77_3_CHAR ); 
F77_VOID_FUN    F77trsv
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,
                   F77_MIN_DECL,    F77_INT_DECL,    F77_VINOUT_DECL,
  F77_INT_DECL     F77_3_CHAR ); 

F77_VOID_FUN    F77gemm
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,
  F77_INT_DECL,    F77_SIN_DECL,    F77_MIN_DECL,    F77_INT_DECL,
  F77_MIN_DECL,    F77_INT_DECL,    F77_SIN_DECL,    F77_MINOUT_DECL,
  F77_INT_DECL     F77_2_CHAR );
F77_VOID_FUN    F77hemm
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_MIN_DECL,    F77_INT_DECL,    F77_MIN_DECL,
  F77_INT_DECL,    F77_SIN_DECL,    F77_MINOUT_DECL, F77_INT_DECL
  F77_2_CHAR );
F77_VOID_FUN    F77her2k
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_MIN_DECL,    F77_INT_DECL,    F77_MIN_DECL,
  F77_INT_DECL,    F77_RIN_DECL,    F77_MINOUT_DECL, F77_INT_DECL
  F77_2_CHAR );
F77_VOID_FUN    F77herk
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,
  F77_RIN_DECL,    F77_MIN_DECL,    F77_INT_DECL,    F77_RIN_DECL,
  F77_MINOUT_DECL, F77_INT_DECL     F77_2_CHAR );
F77_VOID_FUN    F77symm
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_MIN_DECL,    F77_INT_DECL,    F77_MIN_DECL,
  F77_INT_DECL,    F77_SIN_DECL,    F77_MINOUT_DECL, F77_INT_DECL
  F77_2_CHAR );
F77_VOID_FUN    F77syr2k
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_MIN_DECL,    F77_INT_DECL,    F77_MIN_DECL,
  F77_INT_DECL,    F77_SIN_DECL,    F77_MINOUT_DECL, F77_INT_DECL
  F77_2_CHAR );
F77_VOID_FUN    F77syrk
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_INT_DECL,    F77_INT_DECL,
  F77_SIN_DECL,    F77_MIN_DECL,    F77_INT_DECL,    F77_SIN_DECL,
  F77_MINOUT_DECL, F77_INT_DECL     F77_2_CHAR );
F77_VOID_FUN    F77trmm
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,
  F77_INT_DECL,    F77_INT_DECL,    F77_SIN_DECL,    F77_MIN_DECL,
  F77_INT_DECL,    F77_MINOUT_DECL, F77_INT_DECL     F77_4_CHAR );
F77_VOID_FUN    F77trsm
( F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,   F77_CHAR_DECL,
  F77_INT_DECL,    F77_INT_DECL,    F77_SIN_DECL,    F77_MIN_DECL,
  F77_INT_DECL,    F77_MINOUT_DECL, F77_INT_DECL     F77_4_CHAR );

#endif
@ROUT tstsrcmake
include Make.inc

INCdep = $(INCdir)/../atlas_misc.h $(INCdir)/../atlas_f77.h \
         $(INCdir)/../atlas_tst.h $(INCdir)/../atlas_f77blas.h
INCdep1 = $(INCdir)/../atlas_misc.h $(INCdir)/../atlas_tst.h

sf77wobjs = ATL_sf77wrap.o
df77wobjs = ATL_df77wrap.o
cf77wobjs = ATL_cf77wrap.o
zf77wobjs = ATL_zf77wrap.o

obj = ATL_rand.o

sblas = \
   ATL_sf77rotg.o        ATL_sf77rotmg.o       ATL_sf77nrm2.o      \
   ATL_sf77asum.o        ATL_isf77amax.o       ATL_sf77scal.o      \
   ATL_sf77axpy.o        ATL_sf77copy.o        ATL_sf77swap.o      \
   ATL_sf77rot.o         ATL_sf77rotm.o        ATL_sf77dot.o       \
   ATL_dsf77dot.o        ATL_sdsf77dot.o      \
   ATL_sf77gbmv.o        ATL_sf77gemv.o        ATL_sf77ger.o       \
   ATL_sf77sbmv.o        ATL_sf77spmv.o        ATL_sf77spr.o       \
   ATL_sf77spr2.o        ATL_sf77symv.o        ATL_sf77syr.o       \
   ATL_sf77syr2.o        ATL_sf77tbmv.o        ATL_sf77tbsv.o      \
   ATL_sf77tpmv.o        ATL_sf77tpsv.o        ATL_sf77trmv.o      \
   ATL_sf77trsv.o       \
   ATL_sf77gemm.o        ATL_sf77symm.o        ATL_sf77syr2k.o     \
   ATL_sf77syrk.o        ATL_sf77trmm.o        ATL_sf77trsm.o      \
   ATL_sf77getrf.o
dblas = \
   ATL_df77rotg.o        ATL_df77rotmg.o       ATL_df77nrm2.o      \
   ATL_df77asum.o        ATL_idf77amax.o       ATL_df77scal.o      \
   ATL_df77axpy.o        ATL_df77copy.o        ATL_df77swap.o      \
   ATL_df77rot.o         ATL_df77rotm.o        ATL_df77dot.o       \
   ATL_df77gbmv.o        ATL_df77gemv.o        ATL_df77ger.o       \
   ATL_df77sbmv.o        ATL_df77spmv.o        ATL_df77spr.o       \
   ATL_df77spr2.o        ATL_df77symv.o        ATL_df77syr.o       \
   ATL_df77syr2.o        ATL_df77tbmv.o        ATL_df77tbsv.o      \
   ATL_df77tpmv.o        ATL_df77tpsv.o        ATL_df77trmv.o      \
   ATL_df77trsv.o       \
   ATL_df77gemm.o        ATL_df77symm.o        ATL_df77syr2k.o     \
   ATL_df77syrk.o        ATL_df77trmm.o        ATL_df77trsm.o      \
   ATL_df77getrf.o
cblas = \
   ATL_cf77rotg.o        ATL_scf77nrm2.o       ATL_scf77asum.o     \
   ATL_icf77amax.o       ATL_cf77scal.o        ATL_csf77scal.o     \
   ATL_cf77axpy.o        ATL_cf77copy.o        ATL_cf77swap.o      \
   ATL_csf77rot.o        ATL_cf77dotc_sub.o    ATL_cf77dotu_sub.o  \
   ATL_cf77gbmv.o        ATL_cf77gemv.o        ATL_cf77gerc.o      \
   ATL_cf77geru.o        ATL_cf77hbmv.o        ATL_cf77hemv.o      \
   ATL_cf77her.o         ATL_cf77her2.o        ATL_cf77hpmv.o      \
   ATL_cf77hpr.o         ATL_cf77hpr2.o        ATL_cf77tbmv.o      \
   ATL_cf77tbsv.o        ATL_cf77tpmv.o        ATL_cf77tpsv.o      \
   ATL_cf77trmv.o        ATL_cf77trsv.o       \
   ATL_cf77gemm.o        ATL_cf77hemm.o        ATL_cf77her2k.o     \
   ATL_cf77herk.o        ATL_cf77symm.o        ATL_cf77syr2k.o     \
   ATL_cf77syrk.o        ATL_cf77trmm.o        ATL_cf77trsm.o      \
   ATL_cf77getrf.o
zblas = \
   ATL_zf77rotg.o        ATL_dzf77nrm2.o       ATL_dzf77asum.o     \
   ATL_izf77amax.o       ATL_zf77scal.o        ATL_zdf77scal.o     \
   ATL_zf77axpy.o        ATL_zf77copy.o        ATL_zf77swap.o      \
   ATL_zdf77rot.o        ATL_zf77dotc_sub.o    ATL_zf77dotu_sub.o  \
   ATL_zf77gbmv.o        ATL_zf77gemv.o        ATL_zf77gerc.o      \
   ATL_zf77geru.o        ATL_zf77hbmv.o        ATL_zf77hemv.o      \
   ATL_zf77her.o         ATL_zf77her2.o        ATL_zf77hpmv.o      \
   ATL_zf77hpr.o         ATL_zf77hpr2.o        ATL_zf77tbmv.o      \
   ATL_zf77tbsv.o        ATL_zf77tpmv.o        ATL_zf77tpsv.o      \
   ATL_zf77trmv.o        ATL_zf77trsv.o       \
   ATL_zf77gemm.o        ATL_zf77hemm.o        ATL_zf77her2k.o     \
   ATL_zf77herk.o        ATL_zf77symm.o        ATL_zf77syr2k.o     \
   ATL_zf77syrk.o        ATL_zf77trmm.o        ATL_zf77trsm.o      \
   ATL_zf77getrf.o 

all : lib
lib : dlib slib zlib clib
clean : dclean sclean zclean cclean

sobj = $(sblas) ATL_sgegen.o ATL_sgeprint.o \
            ATL_sepsilon.o ATL_sgediff.o ATL_sgenrm1.o \
            ATL_sgediffnrm1.o ATL_sinfnrm.o ATL_svdiff.o \
            ATL_strgen.o ATL_strnrm1.o \
            ATL_sgbnrm1.o ATL_ssbnrm.o ATL_sspnrm.o ATL_ssynrm.o \
            ATL_dtbnrm1.o ATL_dtpnrm1.o

slib : $(sobj) $(obj) $(sf77wobjs)
	$(ARCHIVER) $(ARFLAGS) $(TESTlib) $(sobj) $(obj)
	- $(ARCHIVER) $(ARFLAGS) $(TESTlib) $(sf77wobjs)
	$(RANLIB) $(TESTlib)
	touch slib

sclean : 
	rm -f $(sobj) $(obj) $(sf77wobjs)

dobj = $(dblas) ATL_dgegen.o ATL_dgeprint.o \
            ATL_depsilon.o ATL_dgediff.o ATL_dgenrm1.o \
            ATL_dgediffnrm1.o ATL_dinfnrm.o ATL_dvdiff.o \
            ATL_dtrgen.o ATL_dtrnrm1.o \
            ATL_dgbnrm1.o ATL_dsbnrm.o ATL_dspnrm.o ATL_dsynrm.o \
            ATL_dtbnrm1.o ATL_dtpnrm1.o

dlib : $(dobj) $(obj) $(df77wobjs)
	$(ARCHIVER) $(ARFLAGS) $(TESTlib) $(dobj) $(obj)
	- $(ARCHIVER) $(ARFLAGS) $(TESTlib) $(df77wobjs)
	$(RANLIB) $(TESTlib)
	touch dlib

dclean : 
	rm -f $(dobj) $(obj) $(df77wobjs)

cobj = $(cblas) ATL_cgegen.o ATL_cgeprint.o \
            ATL_cepsilon.o ATL_cgediff.o ATL_cgenrm1.o \
            ATL_cgediffnrm1.o ATL_cinfnrm.o ATL_cvdiff.o \
            ATL_ctrgen.o ATL_ctrnrm1.o \
            ATL_cgbnrm1.o ATL_chbnrm.o ATL_chpnrm.o ATL_chenrm.o \
            ATL_ctbnrm1.o ATL_ctpnrm1.o

clib : $(cobj) $(obj) $(cf77wobjs)
	$(ARCHIVER) $(ARFLAGS) $(TESTlib) $(cobj) $(obj)
	- $(ARCHIVER) $(ARFLAGS) $(TESTlib) $(cf77wobjs)
	$(RANLIB) $(TESTlib)
	touch clib

cclean : 
	rm -f $(cobj) $(obj) $(cf77wobjs)

zobj = $(zblas) ATL_zgegen.o ATL_zgeprint.o \
            ATL_zepsilon.o ATL_zgediff.o ATL_zgenrm1.o \
            ATL_zgediffnrm1.o ATL_zinfnrm.o ATL_zvdiff.o \
            ATL_ztrgen.o ATL_ztrnrm1.o \
            ATL_zgbnrm1.o ATL_zhbnrm.o ATL_zhpnrm.o ATL_zhenrm.o \
            ATL_ztbnrm1.o ATL_ztpnrm1.o

zlib : $(zobj) $(obj) $(zf77wobjs)
	$(ARCHIVER) $(ARFLAGS) $(TESTlib) $(zobj) $(obj)
	- $(ARCHIVER) $(ARFLAGS) $(TESTlib) $(zf77wobjs)
	$(RANLIB) $(TESTlib)
	touch zlib

zclean : 
	rm -f $(zobj) $(obj) $(zf77wobjs)

ATL_sf77wrap.o    : ../ATL_sf77wrap.f
	- $(F77) $(NM) $@ $(OJ) $(F77FLAGS) ../ATL_sf77wrap.f
ATL_df77wrap.o    : ../ATL_df77wrap.f
	- $(F77) $(NM) $@ $(OJ) $(F77FLAGS) ../ATL_df77wrap.f
ATL_cf77wrap.o    : ../ATL_cf77wrap.f
	- $(F77) $(NM) $@ $(OJ) $(F77FLAGS) ../ATL_cf77wrap.f
ATL_zf77wrap.o    : ../ATL_zf77wrap.f
	- $(F77) $(NM) $@ $(OJ) $(F77FLAGS) ../ATL_zf77wrap.f

ATL_rand.o    : ../ATL_rand.c   $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) ../ATL_rand.c

ATL_sgbnrm1.o : ../ATL_gbnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_gbnrm1.c
ATL_dgbnrm1.o : ../ATL_gbnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_gbnrm1.c
ATL_cgbnrm1.o : ../ATL_gbnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_gbnrm1.c
ATL_zgbnrm1.o : ../ATL_gbnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_gbnrm1.c

ATL_stbnrm1.o : ../ATL_tbnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_tbnrm1.c
ATL_dtbnrm1.o : ../ATL_tbnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_tbnrm1.c
ATL_ctbnrm1.o : ../ATL_tbnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_tbnrm1.c
ATL_ztbnrm1.o : ../ATL_tbnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_tbnrm1.c

ATL_stpnrm1.o : ../ATL_tpnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_tpnrm1.c
ATL_dtpnrm1.o : ../ATL_tpnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_tpnrm1.c
ATL_ctpnrm1.o : ../ATL_tpnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_tpnrm1.c
ATL_ztpnrm1.o : ../ATL_tpnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_tpnrm1.c

ATL_ssbnrm.o : ../ATL_sbnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_sbnrm.c
ATL_dsbnrm.o : ../ATL_sbnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_sbnrm.c
ATL_chbnrm.o : ../ATL_sbnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_sbnrm.c
ATL_zhbnrm.o : ../ATL_sbnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_sbnrm.c

ATL_sspnrm.o : ../ATL_spnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_spnrm.c
ATL_dspnrm.o : ../ATL_spnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_spnrm.c
ATL_chpnrm.o : ../ATL_spnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_spnrm.c
ATL_zhpnrm.o : ../ATL_spnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_spnrm.c

ATL_ssynrm.o : ../ATL_synrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_synrm.c
ATL_dsynrm.o : ../ATL_spnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_synrm.c
ATL_chenrm.o : ../ATL_synrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_synrm.c
ATL_zhenrm.o : ../ATL_synrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_synrm.c

ATL_sf77gemm.o : ../ATL_f77gemm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77gemm.c
ATL_sf77trsm.o : ../ATL_f77trsm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77trsm.c
ATL_sf77trmm.o : ../ATL_f77trmm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77trmm.c
ATL_sf77syr2k.o : ../ATL_f77syr2k.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77syr2k.c
ATL_sf77syrk.o : ../ATL_f77syrk.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77syrk.c
ATL_sf77symm.o : ../ATL_f77symm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77symm.c
ATL_sf77ger.o : ../ATL_f77ger.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77ger.c
ATL_sf77gemv.o : ../ATL_f77gemv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77gemv.c
ATL_sf77trmv.o : ../ATL_f77trmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77trmv.c
ATL_sf77getrf.o : ../ATL_f77getrf.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77getrf.c
ATL_svdiff.o : ../ATL_vdiff.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_vdiff.c
ATL_sinfnrm.o : ../ATL_infnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_infnrm.c
ATL_sgediffnrm1.o : ../ATL_gediffnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_gediffnrm1.c
ATL_sgenrm1.o : ../ATL_genrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_genrm1.c
ATL_sepsilon.o : ../ATL_epsilon.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_epsilon.c
ATL_sgediff.o : ../ATL_gediff.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_gediff.c
ATL_sgeprint.o : ../ATL_geprint.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_geprint.c
ATL_sgegen.o : ../ATL_gegen.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_gegen.c
ATL_strnrm1.o : ../ATL_trnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_trnrm1.c
ATL_strgen.o : ../ATL_trgen.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_trgen.c
ATL_df77gemm.o : ../ATL_f77gemm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77gemm.c
ATL_df77trsm.o : ../ATL_f77trsm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77trsm.c
ATL_df77trmm.o : ../ATL_f77trmm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77trmm.c
ATL_df77syr2k.o : ../ATL_f77syr2k.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77syr2k.c
ATL_df77syrk.o : ../ATL_f77syrk.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77syrk.c
ATL_df77symm.o : ../ATL_f77symm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77symm.c
ATL_df77ger.o : ../ATL_f77ger.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77ger.c
ATL_df77gemv.o : ../ATL_f77gemv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77gemv.c
ATL_df77trmv.o : ../ATL_f77trmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77trmv.c
ATL_df77getrf.o : ../ATL_f77getrf.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77getrf.c
ATL_dvdiff.o : ../ATL_vdiff.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_vdiff.c
ATL_dinfnrm.o : ../ATL_infnrm.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_infnrm.c
ATL_dgediffnrm1.o : ../ATL_gediffnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_gediffnrm1.c
ATL_dgenrm1.o : ../ATL_genrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_genrm1.c
ATL_depsilon.o : ../ATL_epsilon.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_epsilon.c
ATL_dgediff.o : ../ATL_gediff.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_gediff.c
ATL_dgeprint.o : ../ATL_geprint.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_geprint.c
ATL_dgegen.o : ../ATL_gegen.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_gegen.c
ATL_dtrnrm1.o : ../ATL_trnrm1.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_trnrm1.c
ATL_dtrgen.o : ../ATL_trgen.c $(INCdir)/../atlas_misc.h
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_trgen.c

ATL_cf77gemm.o : ../ATL_f77gemm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77gemm.c
ATL_cf77trsm.o : ../ATL_f77trsm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77trsm.c
ATL_cf77trmm.o : ../ATL_f77trmm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77trmm.c
ATL_cf77syr2k.o : ../ATL_f77syr2k.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77syr2k.c
ATL_cf77syrk.o : ../ATL_f77syrk.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77syrk.c
ATL_cf77symm.o : ../ATL_f77symm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77symm.c
ATL_cf77her2k.o : ../ATL_f77her2k.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77her2k.c
ATL_cf77herk.o : ../ATL_f77herk.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77herk.c
ATL_cf77hemm.o : ../ATL_f77hemm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77hemm.c
ATL_cf77geru.o : ../ATL_f77geru.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77geru.c
ATL_cf77gerc.o : ../ATL_f77gerc.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77gerc.c
ATL_cf77gemv.o : ../ATL_f77gemv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77gemv.c
ATL_cf77trmv.o : ../ATL_f77trmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77trmv.c
ATL_cf77getrf.o : ../ATL_f77getrf.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77getrf.c
ATL_cvdiff.o : ../ATL_vdiff.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_vdiff.c
ATL_cinfnrm.o : ../ATL_infnrm.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_infnrm.c
ATL_cgediffnrm1.o : ../ATL_gediffnrm1.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_gediffnrm1.c
ATL_cgenrm1.o : ../ATL_genrm1.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_genrm1.c
ATL_cepsilon.o : ../ATL_epsilon.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_epsilon.c
ATL_cgediff.o : ../ATL_gediff.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_gediff.c
ATL_cgeprint.o : ../ATL_geprint.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_geprint.c
ATL_cgegen.o : ../ATL_gegen.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_gegen.c
ATL_ctrnrm1.o : ../ATL_trnrm1.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_trnrm1.c
ATL_ctrgen.o : ../ATL_trgen.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_trgen.c
ATL_zf77gemm.o : ../ATL_f77gemm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77gemm.c
ATL_zf77trsm.o : ../ATL_f77trsm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77trsm.c
ATL_zf77trmm.o : ../ATL_f77trmm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77trmm.c
ATL_zf77syr2k.o : ../ATL_f77syr2k.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77syr2k.c
ATL_zf77syrk.o : ../ATL_f77syrk.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77syrk.c
ATL_zf77symm.o : ../ATL_f77symm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77symm.c
ATL_zf77her2k.o : ../ATL_f77her2k.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77her2k.c
ATL_zf77herk.o : ../ATL_f77herk.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77herk.c
ATL_zf77hemm.o : ../ATL_f77hemm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77hemm.c
ATL_zf77geru.o : ../ATL_f77geru.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77geru.c
ATL_zf77gerc.o : ../ATL_f77gerc.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77gerc.c
ATL_zf77gemv.o : ../ATL_f77gemv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77gemv.c
ATL_zf77trmv.o : ../ATL_f77trmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77trmv.c
ATL_zf77getrf.o : ../ATL_f77getrf.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77getrf.c
ATL_zvdiff.o : ../ATL_vdiff.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_vdiff.c
ATL_zinfnrm.o : ../ATL_infnrm.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_infnrm.c
ATL_zgediffnrm1.o : ../ATL_gediffnrm1.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_gediffnrm1.c
ATL_zgenrm1.o : ../ATL_genrm1.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_genrm1.c
ATL_zepsilon.o : ../ATL_epsilon.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_epsilon.c
ATL_zgediff.o : ../ATL_gediff.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_gediff.c
ATL_zgeprint.o : ../ATL_geprint.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_geprint.c
ATL_zgegen.o : ../ATL_gegen.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_gegen.c
ATL_ztrnrm1.o : ../ATL_trnrm1.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_trnrm1.c
ATL_ztrgen.o : ../ATL_trgen.c $(INCdep1)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_trgen.c


#
ATL_sf77gbmv.o        : ../ATL_f77gbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77gbmv.c
ATL_sf77sbmv.o        : ../ATL_f77sbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77sbmv.c
ATL_sf77spmv.o        : ../ATL_f77spmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77spmv.c
ATL_sf77spr.o         : ../ATL_f77spr.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77spr.c
ATL_sf77spr2.o        : ../ATL_f77spr2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77spr2.c
ATL_sf77symv.o        : ../ATL_f77symv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77symv.c
ATL_sf77syr.o         : ../ATL_f77syr.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77syr.c
ATL_sf77syr2.o        : ../ATL_f77syr2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77syr2.c
ATL_sf77tbmv.o        : ../ATL_f77tbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77tbmv.c
ATL_sf77tbsv.o        : ../ATL_f77tbsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77tbsv.c
ATL_sf77tpmv.o        : ../ATL_f77tpmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77tpmv.c
ATL_sf77tpsv.o        : ../ATL_f77tpsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77tpsv.c
ATL_sf77trsv.o        : ../ATL_f77trsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77trsv.c
#
ATL_df77gbmv.o        : ../ATL_f77gbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77gbmv.c
ATL_df77sbmv.o        : ../ATL_f77sbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77sbmv.c
ATL_df77spmv.o        : ../ATL_f77spmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77spmv.c
ATL_df77spr.o         : ../ATL_f77spr.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77spr.c
ATL_df77spr2.o        : ../ATL_f77spr2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77spr2.c
ATL_df77symv.o        : ../ATL_f77symv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77symv.c
ATL_df77syr.o         : ../ATL_f77syr.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77syr.c
ATL_df77syr2.o        : ../ATL_f77syr2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77syr2.c
ATL_df77tbmv.o        : ../ATL_f77tbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77tbmv.c
ATL_df77tbsv.o        : ../ATL_f77tbsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77tbsv.c
ATL_df77tpmv.o        : ../ATL_f77tpmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77tpmv.c
ATL_df77tpsv.o        : ../ATL_f77tpsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77tpsv.c
ATL_df77trsv.o        : ../ATL_f77trsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77trsv.c
#
ATL_cf77gbmv.o        : ../ATL_f77gbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77gbmv.c
ATL_cf77hemv.o        : ../ATL_f77hemv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77hemv.c
ATL_cf77hbmv.o        : ../ATL_f77hbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77hbmv.c
ATL_cf77hpmv.o        : ../ATL_f77hpmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77hpmv.c
ATL_cf77hpr.o         : ../ATL_f77hpr.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77hpr.c
ATL_cf77hpr2.o        : ../ATL_f77hpr2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77hpr2.c
ATL_cf77her.o         : ../ATL_f77her.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77her.c
ATL_cf77her2.o        : ../ATL_f77her2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77her2.c
ATL_cf77tbmv.o        : ../ATL_f77tbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77tbmv.c
ATL_cf77tbsv.o        : ../ATL_f77tbsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77tbsv.c
ATL_cf77tpmv.o        : ../ATL_f77tpmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77tpmv.c
ATL_cf77tpsv.o        : ../ATL_f77tpsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77tpsv.c
ATL_cf77trsv.o        : ../ATL_f77trsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77trsv.c
#
ATL_zf77gbmv.o        : ../ATL_f77gbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77gbmv.c
ATL_zf77hemv.o        : ../ATL_f77hemv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77hemv.c
ATL_zf77hbmv.o        : ../ATL_f77hbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77hbmv.c
ATL_zf77hpmv.o        : ../ATL_f77hpmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77hpmv.c
ATL_zf77hpr.o         : ../ATL_f77hpr.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77hpr.c
ATL_zf77hpr2.o        : ../ATL_f77hpr2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77hpr2.c
ATL_zf77her.o         : ../ATL_f77her.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77her.c
ATL_zf77her2.o        : ../ATL_f77her2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77her2.c
ATL_zf77tbmv.o        : ../ATL_f77tbmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77tbmv.c
ATL_zf77tbsv.o        : ../ATL_f77tbsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77tbsv.c
ATL_zf77tpmv.o        : ../ATL_f77tpmv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77tpmv.c
ATL_zf77tpsv.o        : ../ATL_f77tpsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77tpsv.c
ATL_zf77trsv.o        : ../ATL_f77trsv.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77trsv.c
#


#
ATL_sf77rotg.o        : ../ATL_f77rotg.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77rotg.c
ATL_sf77rotmg.o       : ../ATL_f77rotmg.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77rotmg.c
ATL_sf77nrm2.o        : ../ATL_f77nrm2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77nrm2.c
ATL_sf77asum.o        : ../ATL_f77asum.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77asum.c
ATL_isf77amax.o       : ../ATL_f77amax.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77amax.c
ATL_sf77scal.o        : ../ATL_f77scal.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77scal.c
ATL_sf77axpy.o        : ../ATL_f77axpy.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77axpy.c
ATL_sf77copy.o        : ../ATL_f77copy.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77copy.c
ATL_sf77swap.o        : ../ATL_f77swap.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77swap.c
ATL_sf77rot.o         : ../ATL_f77rot.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77rot.c
ATL_sf77rotm.o        : ../ATL_f77rotm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77rotm.c
ATL_sf77dot.o         : ../ATL_f77dot.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_f77dot.c
ATL_dsf77dot.o        : ../ATL_dsf77dot.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_dsf77dot.c
ATL_sdsf77dot.o       : ../ATL_sdsf77dot.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSREAL ../ATL_sdsf77dot.c
#
ATL_df77rotg.o        : ../ATL_f77rotg.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77rotg.c
ATL_df77rotmg.o       : ../ATL_f77rotmg.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77rotmg.c
ATL_df77nrm2.o        : ../ATL_f77nrm2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77nrm2.c
ATL_df77asum.o        : ../ATL_f77asum.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77asum.c
ATL_idf77amax.o       : ../ATL_f77amax.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77amax.c
ATL_df77scal.o        : ../ATL_f77scal.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77scal.c
ATL_df77axpy.o        : ../ATL_f77axpy.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77axpy.c
ATL_df77copy.o        : ../ATL_f77copy.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77copy.c
ATL_df77swap.o        : ../ATL_f77swap.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77swap.c
ATL_df77rot.o         : ../ATL_f77rot.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77rot.c
ATL_df77rotm.o        : ../ATL_f77rotm.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77rotm.c
ATL_df77dot.o         : ../ATL_f77dot.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDREAL ../ATL_f77dot.c
#
ATL_cf77rotg.o        : ../ATL_f77rotg.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77rotg.c
ATL_scf77nrm2.o       : ../ATL_f77nrm2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77nrm2.c
ATL_scf77asum.o       : ../ATL_f77asum.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77asum.c
ATL_icf77amax.o       : ../ATL_f77amax.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77amax.c
ATL_cf77scal.o        : ../ATL_f77scal.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77scal.c
ATL_csf77scal.o       : ../ATL_f77rscal.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77rscal.c
ATL_cf77axpy.o        : ../ATL_f77axpy.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77axpy.c
ATL_cf77copy.o        : ../ATL_f77copy.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77copy.c
ATL_cf77swap.o        : ../ATL_f77swap.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77swap.c
ATL_csf77rot.o        : ../ATL_f77rot.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77rot.c
ATL_cf77dotu_sub.o    : ../ATL_f77dotu_sub.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77dotu_sub.c
ATL_cf77dotc_sub.o    : ../ATL_f77dotc_sub.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DSCPLX ../ATL_f77dotc_sub.c
#
ATL_zf77rotg.o        : ../ATL_f77rotg.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77rotg.c
ATL_dzf77nrm2.o       : ../ATL_f77nrm2.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77nrm2.c
ATL_dzf77asum.o       : ../ATL_f77asum.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77asum.c
ATL_izf77amax.o       : ../ATL_f77amax.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77amax.c
ATL_zf77scal.o        : ../ATL_f77scal.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77scal.c
ATL_zdf77scal.o       : ../ATL_f77rscal.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77rscal.c
ATL_zf77axpy.o        : ../ATL_f77axpy.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77axpy.c
ATL_zf77copy.o        : ../ATL_f77copy.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77copy.c
ATL_zf77swap.o        : ../ATL_f77swap.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77swap.c
ATL_zdf77rot.o        : ../ATL_f77rot.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77rot.c
ATL_zf77dotu_sub.o    : ../ATL_f77dotu_sub.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77dotu_sub.c
ATL_zf77dotc_sub.o    : ../ATL_f77dotc_sub.c $(INCdep)
	$(KC) $(NM) $@ $(OJ) $(KCFLAGS) -DDCPLX ../ATL_f77dotc_sub.c
#
@ROUT Make.ext
basd = /home/rwhaley/Base/ATLAS
basf = $(basd)/atlas-tst.base
ext = extract3.0 -b $(basf) -langC -lnlen79 -llwarn2
extf = extract3.0 -b $(basf) -langF -lnlen79 -llwarn2

@declare "fil = " y n
   ATL_sf77wrap.f
   ATL_df77wrap.f
   ATL_cf77wrap.f
   ATL_zf77wrap.f
   ATL_dsf77dot.c
   ATL_sdsf77dot.c
   @multidef rout
      getrf potrf rscal
      rotg rotmg nrm2 asum amax scal axpy copy swap rot rotm dot 
      dotc_sub dotu_sub
      gbmv sbmv hpmv hbmv spr spr2 symv syr syr2 tbmv tbsv spmv tpsv
      hpr hpr2 tpmv
      trsv trmv gemv ger her hemv her2 gerc geru
      herk her2k hemm symm syrk syr2k trmm trsm gemm
   @endmultidef
   @whiledef rout
      ATL_f77@(rout).c
   @endwhile
   @multidef rout
      rand
      gbnrm1 sbnrm spnrm synrm tbnrm1 tpnrm1 hbnrm hpnrm henrm
      gegen geprint gediff epsilon trgen trnrm1 infnrm genrm1 vdiff gediffnrm1
   @endmultidef
   @whiledef rout
      ATL_@(rout).c
   @endwhile
@enddeclare

all : $(fil)

@multidef rout
   getrf potrf rscal
   rotg rotmg nrm2 asum amax scal axpy copy swap rot rotm dot dotc_sub dotu_sub
   gbmv sbmv hbmv hpmv spmv spr spr2 symv syr syr2 tbmv tbsv tpsv
   hpr hpr2 tpmv her her2 hemv trsv trmv gemv ger gerc geru
   herk her2k hemm symm syrk syr2k trmm trsm gemm
@endmultidef
@whiledef rout
ATL_f77@(rout).c : $(basf)
	$(ext) -o $@ rout=$*
@endwhile
@multidef rout
   rand dsf77dot sdsf77dot
   gbnrm1 sbnrm spnrm synrm tbnrm1 tpnrm1  hbnrm hpnrm henrm
   gegen geprint gediff epsilon trgen trnrm1 infnrm genrm1 vdiff gediffnrm1
@endmultidef
@whiledef rout
ATL_@(rout).c : $(basf)
	$(ext) -o $@ rout=$*
@endwhile

@multidef rout
   sf77wrap df77wrap cf77wrap zf77wrap
@endmultidef
@whiledef rout
ATL_@(rout).f : $(basf)
	$(extf) -o $@ rout=$*
@endwhile

@ROUT ATL_rand
@extract -b @(topd)/gen.inc what=cw @(ap00)
#include "atlas_misc.h"
#include "atlas_tst.h"

static void ATL_ladd
(
   int *                      J,
   int *                      K,
   int *                      I
)
{
/* 
 * Purpose
 * =======
 *
 * ATL_ladd adds  without carry two long positive integers  K and J  an
 * put the result into I.  The long integers  I, J, K are encoded on 31
 * bits using an array of 2 integers.  The 16-lower bits  are stored  i
 * the  first  entry  of each array,  the 15-higher bits  in the second
 * entry.
 *
 * Arguments
 * =========
 *
 * J       (local input)                 int *
 *         On entry, J is an integer array of dimension 2 containing the
 *         encoded long integer J.
 *
 * K       (local input)                 int *
 *         On entry, K is an integer array of dimension 2 containing the
 *         encoded long integer K.
 *
 * I       (local output)                int *
 *         On entry, I is an integer array of dimension 2. On exit, this
 *         array contains the encoded long integer result.
 *
 * ---------------------------------------------------------------------
 */ 
   int                        itmp0 = K[0] + J[0], itmp1;
/*
 *    K[1] K[0] K  I[0]  = (K[0]+J[0]) % 2^16
 *    0XXX XXXX    carry = (K[0]+J[0]) / 2^16
 *
 * +  J[1] J[0] J  I[1] = K[1] + J[1] + carry
 *    0XXX XXXX    I[1] = I[1] % 2^15
 *    -------------
 *    I[1] I[0]
 *    0XXX XXXX I
 */
   itmp1 = itmp0 >> 16;         I[0] = itmp0 - ( itmp1 << 16 );
   itmp0 = itmp1 + K[1] + J[1]; I[1] = itmp0 - (( itmp0 >> 15 ) << 15);
}

static void ATL_lmul
(
   int *                      K,
   int *                      J,
   int *                      I
)
{
/* 
 * Purpose
 * =======
 *
 * ATL_lmul multiplies  without carry two long positive integers K and J
 * and put the result into I.  The long integers  I, J, K are encoded on
 * 31 bits using an array of 2 integers. The 16-lower bits are stored in
 * the first entry of each array, the 15-higher bits in the second entry
 * of each array. For efficiency purposes, the  intrisic modulo function
 * is inlined.
 *
 * Arguments
 * =========
 *
 * K       (local input)                 int *
 *         On entry, K is an integer array of dimension 2 containing the
 *         encoded long integer K.
 *
 * J       (local input)                 int *
 *         On entry, J is an integer array of dimension 2 containing the
 *         encoded long integer J.
 *
 * I       (local output)                int *
 *         On entry, I is an integer array of dimension 2. On exit, this
 *         array contains the encoded long integer result.
 *
 * ---------------------------------------------------------------------
 */ 
   static int                 ipow30 = ( 1 << 30 );
   int                        kt, lt;
/*
 *    K[1] K[0] K  kt = K[0]*J[0]
 *    0XXX XXXX    if(kt < 0) kt += 2^31
 * x               I[0] = kt % 2^16
 *                 lt = K[0]*J[1] + K[1]*J[0]
 *    J[1] J[0] J  if(lt < 0) lt += 2^31
 *    0XXX XXXX    kt = (kt / 2^16) + lt
 * --------------  if(kt < 0) kt += 2^31
 *    I[1] I[0]    I[1] = kt % 2^15
 *    0XXX XXXX I
 */
   kt   = K[0] * J[0]; if( kt < 0 ) kt = ( kt + ipow30 ) + ipow30;
   I[0] = kt - ( ( kt >> 16 ) << 16 );
   lt   = K[0] * J[1] + K[1] * J[0];
   if( lt < 0 ) lt = ( lt + ipow30 ) + ipow30;
   kt = ( kt >> 16 ) + lt;
   if( kt < 0 ) kt = ( kt + ipow30 ) + ipow30;
   I[1] = kt - ( ( kt >> 15 ) << 15 );
}

static void ATL_setran
(
   const int                  OPTION,
   int *                      IRAN
)
{
/* 
 * Purpose
 * =======
 *
 * ATL_setran initializes  the random generator with the encoding of the
 * first number X(0) in the sequence,  and the constants a and c used to
 * compute the next element in the sequence: X(n+1) = a*X(n) + c.  X(0),
 * a and c are stored in the static variables  irand, ias and ics.  When
 * OPTION is 0 (resp. 1 and 2),  irand  (resp. ia and ic)  is set to the
 * values of the input array IRAN.  When OPTION is 3, IRAN is set to the
 * current value of irand, and irand is then incremented.
 *
 * Arguments
 * =========
 *
 * OPTION  (local input)                 const int
 *         On entry, OPTION  is an integer that specifies the operations
 *         to be performed on the random generator as specified above.
 *
 * IRAN    (local input/output)          int *
 *         On entry,  IRAN is an array of dimension 2, that contains the
 *         16-lower and 15-higher bits of a random number.
 *
 * ---------------------------------------------------------------------
 */ 
   static int                 ias[2], ics[2], irand[2];
   int                        j[2];

   if(      OPTION == 3 )
   {                                       /* return current value */
      IRAN[0] = irand[0]; IRAN[1] = irand[1];
      ATL_lmul( irand, ias, j );         /* j     = irand * ias;   */
      ATL_ladd( j, ics, irand );         /* irand = j     + ics;   */
   } 
   else if( OPTION == 0 ) { irand[0] = IRAN[0]; irand[1] = IRAN[1]; }
   else if( OPTION == 1 ) { ias  [0] = IRAN[0]; ias  [1] = IRAN[1]; }
   else if( OPTION == 2 ) { ics  [0] = IRAN[0]; ics  [1] = IRAN[1]; }
}

static void ATL_xjumpm
(
   const int                  JUMPM,
   int *                      MULT,
   int *                      IADD,
   int *                      IRANN,
   int *                      IRANM,
   int *                      IAM,
   int *                      ICM
)
{
/* 
 * Purpose
 * =======
 *
 * ATL_xjumpm computes  the constants  A and C  to jump JUMPM numbers in
 * the random sequence: X(n+JUMPM) = A*X(n)+C.  The constants encoded in
 * MULT and IADD  specify  how to jump from one entry in the sequence to
 * the next.
 *
 * Arguments
 * =========
 *
 * JUMPM   (local input)                 const int
 *         On entry,  JUMPM  specifies  the  number  of entries  in  the
 *         sequence to jump over. When JUMPM is less or equal than zero,
 *         A and C are not computed, IRANM is set to IRANN corresponding
 *         to a jump of size zero.
 *
 * MULT    (local input)                 int *
 *         On entry, MULT is an array of dimension 2,  that contains the
 *         16-lower  and 15-higher bits of the constant  a  to jump from
 *         X(n) to X(n+1) = a*X(n) + c in the random sequence.
 *
 * IADD    (local input)                 int *
 *         On entry, IADD is an array of dimension 2,  that contains the
 *         16-lower  and 15-higher bits of the constant  c  to jump from
 *         X(n) to X(n+1) = a*X(n) + c in the random sequence.
 *
 * IRANN   (local input)                 int *
 *         On entry, IRANN is an array of dimension 2. that contains the
 *         16-lower and 15-higher bits of the encoding of X(n).
 *
 * IRANM   (local output)                int *
 *         On entry,  IRANM  is an array of dimension 2.   On exit, this
 *         array  contains respectively  the 16-lower and 15-higher bits
 *         of the encoding of X(n+JUMPM).
 *
 * IAM     (local output)                int *
 *         On entry, IAM is an array of dimension 2. On exit, when JUMPM
 *         is  greater  than  zero,  this  array  contains  the  encoded
 *         constant  A  to jump from  X(n) to  X(n+JUMPM)  in the random
 *         sequence. IAM(0:1)  contains  respectively  the  16-lower and
 *         15-higher  bits  of this constant  A. When  JUMPM  is less or
 *         equal than zero, this array is not referenced.
 *
 * ICM     (local output)                int *
 *         On entry, ICM is an array of dimension 2. On exit, when JUMPM
 *         is  greater  than  zero,  this  array  contains  the  encoded
 *         constant  C  to jump from  X(n)  to  X(n+JUMPM) in the random
 *         sequence. ICM(0:1)  contains  respectively  the  16-lower and
 *         15-higher  bits  of this constant  C. When  JUMPM  is less or
 *         equal than zero, this array is not referenced.
 *
 * ---------------------------------------------------------------------
 */ 
   int                        j[2], k;

   if( JUMPM > 0 )
   {
      IAM[0] = MULT[0]; IAM[1] = MULT[1];   /* IAM   = MULT;          */
      ICM[0] = IADD[0]; ICM[1] = IADD[1];   /* ICM   = IADD;          */
      for( k = 1; k <= JUMPM-1; k++ )
      {
         ATL_lmul( IAM, MULT, j );          /* j     = IAM   * MULT;  */
         IAM[0] = j[0]; IAM[1] = j[1];      /* IAM   = j;             */
         ATL_lmul( ICM, MULT, j );          /* j     = ICM   * MULT;  */
         ATL_ladd( IADD, j, ICM );          /* ICM   = IADD  + j;     */
      }
      ATL_lmul( IRANN, IAM, j );            /* j     = IRANN * IAM;   */
      ATL_ladd( j, ICM, IRANM );            /* IRANM = j     + ICM;   */
   }
   else
   {                                        /* IRANM = IRANN          */
      IRANM[0] = IRANN[0]; IRANM[1] = IRANN[1];
   }
}


void ATL_srand(int iseed)
{
   int iadd[2], ia1[2], ic1[2], iran1[2], jseed[2], mult[2];

   mult [0] = 20077; mult[1] = 16838;
   iadd [0] = 12345; iadd [1] = 0;
   jseed[0] = iseed; jseed[1] = (iseed>>16);

   ATL_xjumpm( 1, mult, iadd, jseed, iran1, ia1, ic1 );
   ATL_setran( 0, iran1 ); ATL_setran( 1, ia1 ); ATL_setran( 2, ic1 );
}

int ATL_rand(void)
{
   int j[2];

   ATL_setran( 3, j );
   return(j[0] + ((j[1])<<16));
}
@ROUT ATL_tstsqtran
@extract -b @(topd)/gen.inc what=cw @(cw01)
#include "atlas_misc.h"
#include "atlas_tst.h"

static void my_swap
   (const int N, TYPE *X, const int incx, TYPE *Y, const int incy)
{
   const int incX = incx SHIFT, incY = incy SHIFT;
   int i;
   TYPE t0;
   for (i=N; i; i--, X += incX, Y += incY)
   {
      t0 = *X;
      *X = *Y;
      *Y = t0;
      #ifdef TCPLX
         t0 = X[1];
         X[1] = Y[1];
         Y[1] = t0;
      #endif
   }
}
void Mjoin(PATL,tstsqtran)(const int N, TYPE *A, const int lda0)
/*
 * transposes the square matrix A, easiest (and slowest) algorithm possible
 */
{
   const int lda=(lda0 SHIFT), ldap1=lda0+1;
   int i;

   for (i=1; i < N; i++)
      my_swap(N-i, A+(i SHIFT), ldap1, A+i*lda, ldap1);
}
@ROUT ATL_hediffnrm
@extract -b @(topd)/gen.inc what=cw @(cw01)
#include "atlas_misc.h"
#include "atlas_tst.h"
TYPE Mjoin(PATL,hediffnrm)
   (const enum ATLAS_ORDER Order, const enum ATLAS_UPLO Uplo, const int N,
    const TYPE *A0, const int ld0, const TYPE *A1, const int ld1)
/*
 * Returns ||A0 - A1||, assuming both matrices are hermitian.
 */
{
   int i, j, k;
   const int ld02 = (ld0 SHIFT), ld12 = (ld1 SHIFT);
   enum ATLAS_UPLO uplo=Uplo;
   TYPE t0, t1, max=ATL_rzero;
   const TYPE *a0, *a1;
   if (Order == AtlasRowMajor)
   {
      if (Uplo == AtlasUpper) uplo = AtlasLower;
      else uplo = AtlasUpper;
   }
   if (uplo == AtlasUpper)
   {
      for (k=0; k != N; k++)
      {
         t0 = ATL_rzero;
         a0 = A0 + k*ld02;
         a1 = A1 + k*ld12;
         for (i=0; i < (k SHIFT); i++)
         {
            t1 = *a0++ - *a1++;
            t0 += Mabs(t1);
         }
         t1 = *a0 - *a1;
         t0 += Mabs(t1);
         for (i++,a0 += ld02,a1 += ld12; i < N; i++, a0 += ld02, a1 += ld12)
         {
            t1 = *a0 - *a1;
            t0 += Mabs(t1);
            #ifdef TCPLX
               t1 = a0[1] - a1[1];
               t0 += Mabs(t1);
            #endif
         }
         if (t0 > max) max = t0;
      }
   }
   else  /* matrix stored in lower triangle */
   {
      for (k=0; k != N; k++)
      {
         t0 = ATL_rzero;
         for (i=0; i != k; i++, a0 += ld02, a1 += ld12)
         {
            t1 = *a0 - *a1;
            t0 += Mabs(t1);
            #ifdef TCPLX
               t1 = a0[1] - a1[1];
               t0 += Mabs(t1);
            #endif
         }
         t1 = *a0++ - *a1++;
         t0 += Mabs(t1);
         #ifdef TCPLX
            a0++; a1++;
         #endif
         for (i++; i < N; i++)
         {
            t1 = *a0++ - *a1++;
            t0 += Mabs(t1);
            #ifdef TCPLX
               t1 = *a0++ - *a1++;
               t0 += Mabs(t1);
            #endif
         }
         if (t0 > max) max = t0;
      }
   }
   return(max);
}
@ROUT !
