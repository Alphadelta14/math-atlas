@skip @extract -b @(topd)/gen.inc what=crsetup
@skip @extract -b @(topd)/gen.inc what=cw @(cw99)
@skip @extract -b @(topd)/cw.inc lang=c -define cwdate 1999 -define cwdate 2015 
/*
 * Header file for ATLAS's auxiliary routines
 */
#ifndef ATLAS_AUX_H
#define ATLAS_AUX_H
#include "atlas_misc.h"

void ATL_xerbla(int p, char *rout, char *form, ...);
int ATL_lcm(const int M, const int N);
double ATL_flushcache(long long size);
double ATL_walltime(void);
double ATL_cputime(void);

/*
 * Auxiliary routines that come in all four types
 */
@multidef styp double@^* float@^* double@^ float@^
@multidef typ double float double float
@whiledef pre z c d s
void ATL_@(pre)geset(ATL_CINT M, ATL_CINT N, const @(styp)alpha, 
                const @(styp)beta, @(typ) *A, ATL_CINT lda);
void ATL_@(pre)trsetL(ATL_CINT M, ATL_CINT N, const @(styp)alpha, 
                 const @(styp)beta, @(typ) *A, ATL_CINT lda);
void ATL_@(pre)trsetU(ATL_CINT M, ATL_CINT N, const @(styp)alpha, 
                 const @(styp)beta, @(typ) *A, ATL_CINT lda);
@(typ) ATL_@(pre)gemaxnrm(ATL_CINT M, ATL_CINT N, @(typ) *A, ATL_CINT lda);
   @whiledef be 0 1 N X
void ATL_@(pre)geput1T_b@(be)(ATL_CSZT M, ATL_CSZT N, const @(typ) *A, ATL_CSZT lda, 
                     const @(styp)beta, @(typ) *C, ATL_CSZT ldc);
void ATL_@(pre)amL2skLNB_b@(be)
   (ATL_iptr_t N, ATL_CUINT MU, ATL_CUINT NU, ATL_CUINT shVL, 
    const @(typ) *W,  const @(styp)beta, @(typ) *C, ATL_iptr_t ldc);
   @endwhile
void ATL_@(pre)geadd(const int M, const int N, const @(styp)alpha, 
                const @(typ) *A, const int lda, const @(styp)beta, 
                @(typ) *C, const int ldc);
void ATL_@(pre)gemove(const int M, const int N, const @(styp)alpha, 
                 const @(typ) *A, const int lda, @(typ) *C, const int ldc);
void ATL_@(pre)gemoveT(const int N, const int M, const @(styp)alpha, 
                  const @(typ) *A, const int lda, @(typ) *C, const int ldc);
void ATL_@(pre)syreflect(const enum ATLAS_UPLO Uplo, const int N, 
                    @(typ) *C, const int ldc);
void ATL_@(pre)gecopy(const int M, const int N, const @(typ) *A, const int lda,
                 @(typ) *C, const int ldc);

void ATL_@(pre)gescal(const int M, const int N, const @(styp)beta, 
                 @(typ) *C, const int ldc);
void ATL_@(pre)tradd
   (const enum ATLAS_UPLO Uplo, ATL_CINT N, const @(typ) *A, ATL_CINT lda,
    const @(styp)beta, @(typ) *C, ATL_CINT ldc);
void ATL_@(pre)trscal
   (const enum ATLAS_UPLO Uplo, const int M, const int N, const @(styp)alpha,
    @(typ) *A, const int lda);
void ATL_@(pre)hescal
   (const enum ATLAS_UPLO Uplo, const int M, const int N, const @(typ) alpha,
    @(typ) *A, const int lda);

void ATL_@(pre)gezero(const int M, const int N, @(typ) *C, const int ldc);
void ATL_@(pre)syApAt_NB
   (const enum ATLAS_UPLO Uplo, ATL_CINT N, const @(typ) *A, ATL_CINT lda,
    const @(styp)beta, @(typ) *C, ATL_CINT ldc);
void ATL_@(pre)syApAt
   (const enum ATLAS_UPLO Uplo, ATL_CINT N, const @(typ) *A, ATL_CINT lda,
    const @(styp)beta, @(typ) *C, ATL_CINT ldc);
void ATL_@(pre)geApBt_NB
   (ATL_CINT M, ATL_CINT N, const @(typ) *A, ATL_CINT lda,
    const @(typ) *B, ATL_CINT ldb, const @(styp)beta, @(typ) *C, ATL_CINT ldc);
void ATL_@(pre)geswapT(ATL_CINT M, ATL_CINT N, @(typ) *A, ATL_CINT lda,
                  @(typ) *B, ATL_CINT ldb);
void ATL_@(pre)sqtrans(ATL_CINT N, @(typ) *C, ATL_CINT ldc);

void ATL_@(pre)zero(const int N, @(typ) *X, const int incX);
void ATL_@(pre)set(const int N, const @(styp)alpha, @(typ) *X, const int incX);
void ATL_@(pre)scal(const int N, const @(styp)alpha, @(typ) *X, const int incX);
void ATL_@(pre)copy(const int N, const @(typ) *X, const int incX, 
               @(typ) *Y, const int incY);
void ATL_@(pre)cpsc(const int N, const @(styp)alpha, const @(typ) *X, 
               const int incX, @(typ) *Y, const int incY);
void ATL_@(pre)axpy(const int N, const @(styp)alpha, const @(typ) *X, 
               const int incX, @(typ) *Y, const int incY);
void ATL_@(pre)axpy_x1_y1(const int N, const @(styp)alpha, const @(typ) *X, 
                     const int incX, @(typ) *Y, const int incY);
void ATL_@(pre)axpby(const int N, const @(styp)alpha, const @(typ) *X, 
                const int incX, const @(styp)beta, @(typ) *Y, const int incY);

@whiledef be bX b0 b1
   @whiledef al aX a0 a1
void ATL_@(pre)geadd_@(al)_@(be)
   (ATL_CINT  M, ATL_CINT  N, const @(styp)alpha, const @(typ) *A, 
    ATL_CINT  lda, const @(styp)beta, @(typ) *C, ATL_CINT  ldc);
void ATL_@(pre)axpby_@(al)_@(be)
   (ATL_CINT  N, const @(styp)alpha, const @(typ) *X, ATL_CINT  incX, 
    const @(styp)beta, @(typ) *Y, ATL_CINT  incY);
   @endwhile
@endwhile

@whiledef al aX a0 a1
void ATL_@(pre)gemove_@(al)
   (ATL_CINT M, ATL_CINT N, const @(styp)alpha, const @(typ) *A, 
    const int lda, @(typ) *C, ATL_CINT ldc);
@endwhile

@whiledef be bX b0 b1
void ATL_@(pre)gescal_@(be)
   (ATL_CINT  M, ATL_CINT  N, const @(styp)beta, @(typ) *C, ATL_CINT  ldc);
@endwhile

   @undef typ
   @undef styp
@endwhile

/*
 * Real-only aux routines
 */
@multidef typ double float
@whiledef pre d s
void ATL_@(pre)trcpypad4L(enum ATLAS_DIAG Diag, ATL_CINT N, const @(typ) *A, 
                     ATL_CINT lda, @(typ) *c, ATL_CINT ldc);
void ATL_@(pre)trcpypad4U(enum ATLAS_DIAG Diag, ATL_CINT N, const @(typ) *A, 
                     ATL_CINT lda, @(typ) *c, ATL_CINT ldc);
   @whiledef up L U
      @whiledef al 1 n X
void ATL_@(pre)sycpy@(up)NB_a@(al)(ATL_CSZT N, const @(typ) alpha, const @(typ) *A, 
                      ATL_CSZT lda, @(typ) *C, ATL_CSZT ldc);
      @endwhile
   @endwhile
   @undef typ
@endwhile

/*
 * Specialized complex auxiliary routines
 */

@multidef styp double@^* float@^*
@multidef typ double float
@whiledef pre z c
   @whiledef sy sy he
      @whiledef up L U
         @whiledef al 1 n r X
void ATL_@(pre)@(sy)cpy@(up)NB_a@(al)(ATL_CSZT N, const @(styp)alpha, const @(typ) *A, 
                      ATL_CSZT lda, @(typ) *C, ATL_CSZT ldc);
         @endwhile
      @endwhile
   @endwhile
   @whiledef be 0 1 N X
void ATL_@(pre)geput1H_b@(be)(ATL_CSZT M, ATL_CSZT N, const @(typ) *A, ATL_CSZT lda, 
                     const @(styp)beta, @(typ) *C, ATL_CSZT ldc);
   @endwhile
void ATL_@(pre)swap_cplx2real(ATL_CUINT N, @(typ) *C, ATL_CINT incc,
                         @(typ) *R, ATL_CINT incR, @(typ) *I, ATL_CINT incI);
void ATL_@(pre)heApAc_NB
   (const enum ATLAS_UPLO Uplo, ATL_CINT N, const @(typ) *A, ATL_CINT lda,
    const @(styp)beta, @(typ) *C, ATL_CINT ldc);
void ATL_@(pre)heApAc
   (const enum ATLAS_UPLO Uplo, ATL_CINT N, const @(typ) *A, ATL_CINT lda,
    const @(styp)beta, @(typ) *C, ATL_CINT ldc);
void ATL_@(pre)geApBc_NB
   (ATL_CINT M, ATL_CINT N, const @(typ) *A, ATL_CINT lda,
    const @(typ) *B, ATL_CINT ldb, const @(styp)beta, @(typ) *C, ATL_CINT ldc);
void ATL_@(pre)cplxdivide(ATL_CINT N, const @(typ) *b, @(typ) *X, ATL_CINT incX,
                     @(typ) *Y, ATL_CINT incY);
void ATL_@(pre)cplxinvert
   (const int N, @(typ) *X, const int incX, @(typ) *Y, const int incY);

void ATL_@(pre)hereflect(const enum ATLAS_UPLO Uplo, const int N, 
                    @(typ) *C, const int ldc);
void ATL_@(pre)scalConj
   (const int N, const @(styp)alpha, @(typ) *X, const int incX);
void ATL_@(pre)copyConj
   (const int N, const @(typ) *X, const int incX, @(typ) *Y, const int incY);
void ATL_@(pre)moveConj
   (const int N, const @(styp)alpha, const @(typ) *X, const int incX, 
    @(typ) *Y, const int incY);
void ATL_@(pre)axpyConj
   (const int N, const @(styp)alpha, const @(typ) *X, const int incX, 
    @(typ) *Y, const int incY);
void ATL_@(pre)axpyConj_x1_y1(const int N, const @(styp)alpha, const @(typ) *X, 
                         const int incX, @(typ) *Y, const int incY);
void ATL_@(pre)axpbyConj
   (const int N, const @(styp)alpha, const @(typ) *X, const int incX, 
    const @(styp)beta, @(typ) *Y, const int incY);
@whiledef be bX b0 b1 bXi0
   @whiledef al aX a0 a1 aXi0
void ATL_@(pre)axpbyConj_@(al)_@(be)
   (ATL_CINT  N, const @(styp)alpha, const @(typ) *X, ATL_CINT  incX, 
    const @(styp)beta, @(typ) *Y, ATL_CINT  incY);
   @endwhile
@endwhile
void ATL_@(pre)gemoveC(const int N, const int M, const @(styp)alpha, 
                  const @(typ) *A, const int lda, @(typ) *C, const int ldc);

@whiledef be bX bXi0 b0 b1
   @whiledef al aX aXi0 a0 a1 aXi0
void ATL_@(pre)geaddConj_@(al)_@(be)
   (const int M, const int N, const @(styp)alpha, const @(typ) *A, 
    const int lda, const @(styp)beta, @(typ) *C, const int ldc);
   @endwhile
@endwhile
@whiledef be bX bXi0 b0 b1
void ATL_@(pre)axpby_aXi0_@(be)
   (const int N, const @(styp)alpha, const @(typ) *X, const int incX, 
    const @(styp)beta, @(typ) *Y, const int incY);
void ATL_@(pre)axpby_aXi0_@(be)
   (const int N, const @(styp)alpha, const @(typ) *X, const int incX, 
    const @(styp)beta, @(typ) *Y, const int incY);
void ATL_@(pre)geadd_aXi0_@(be)
   (const int M, const int N, const @(styp)alpha, const @(typ) *A, 
    const int lda, const @(styp)beta, @(typ) *C, const int ldc);
@endwhile
@whiledef al aX a0 a1
void ATL_@(pre)axpby_@(al)_bXi0
   (const int N, const @(styp)alpha, const @(typ) *X, const int incX, 
    const @(styp)beta, @(typ) *Y, const int incY);
void ATL_@(pre)geadd_@(al)_bXi0
   (const int M, const int N, const @(styp)alpha, const @(typ) *A, 
    const int lda, const @(styp)beta, @(typ) *C, const int ldc);
@endwhile

void ATL_@(pre)gemove_aXi0
   (const int M, const int N, const @(styp)alpha0, const @(typ) *A, 
    const int lda, @(typ) *C, const int ldc);

void ATL_@(pre)gescal_bXi0
   (const int M, const int N, const @(styp)beta, @(typ) *C, const int ldc);

   @undef typ
   @undef styp
@endwhile

void ATL_qdgecollapse(const int M, const int N, ATL_QTYPE *C, 
                      const int dldc, const int sldc);
void ATL_dsgecollapse(const int M, const int N, double *C, 
                      const int dldc, const int sldc);
void ATL_ezgecollapse(const int M, const int N, ATL_QTYPE *C, 
                      const int dldc, const int sldc);
void ATL_zcgecollapse(const int M, const int N, double *C, 
                      const int dldc, const int sldc);
void ATL_qdtrcollapse(const enum ATLAS_UPLO Uplo, const enum ATLAS_DIAG Diag, 
                      const int N, ATL_QTYPE *C, const int dldc,const int sldc);
void ATL_dstrcollapse(const enum ATLAS_UPLO Uplo, const enum ATLAS_DIAG Diag, 
                      const int N, double *C, const int dldc, const int sldc);
void ATL_zctrcollapse(const enum ATLAS_UPLO Uplo, const enum ATLAS_DIAG Diag,
                      const int N, double *C, const int dldc, const int sldc);
void ATL_eztrcollapse(const enum ATLAS_UPLO Uplo, const enum ATLAS_DIAG Diag,
                      const int N, ATL_QTYPE *C, const int dldc,const int sldc);

/*
 * This is the general LRU-based flush
 */
#if defined(ATL_USEPTHREADS) && !defined(ATL_flushcache)
   #include "atlas_pthreads.h"
   #define ATL_flushcache ATL_ptflushcache
   #define ATL_flushCacheByAddr ATL_ptflushCacheByAddr
   #define ATL_PTCACHEMUL * ATL_NTHREADS
#else
   #define ATL_PTCACHEMUL
#endif
double ATL_flushcache(long long size);
#ifdef ATL_USEPTHREADS
   void ATL_NumaTouchSpread(size_t N, void *buff);
#endif
/*
 * If we have it, use assembly-based explicit cache-line flush algorithm
 */
#if defined(ATL_ARCH_PPCG5) || defined(ATL_ARCH_PPCG4) || \
    defined(ATL_GAS_PPC) || defined(ATL_SSE2) || \
    defined(ATL_ARCH_IA64Itan) || defined(ATL_ARCH_IA64Itan2) || \
    defined(ATL_ARM64)

   #define ATL_LINEFLUSH 1
   typedef struct flStruct FLSTRUCT;
   struct flStruct
   {
      void *p;
      size_t length;
      FLSTRUCT *next;
   };
   FLSTRUCT *ATL_GetFlushStruct(void *p, size_t length, FLSTRUCT *next);
   void ATL_KillAllFlushStructs(FLSTRUCT *p);
   void ATL_flushCacheByAddr(size_t N, void *vp);
   void ATL_FlushAreasByCL(FLSTRUCT *fp);
   #if defined(ATL_USEPTHREADS) && !defined(ATL_FlushAreasByCL)
       void ATL_ptFlushAreasByCL(FLSTRUCT *fp);
       #define ATL_FlushAreasByCL ATL_ptFlushAreasByCL
   #endif

#else
    #define ATL_LINEFLUSH 0
#endif

#endif
